
10P10_keypad_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000f8  00000000  00000000  00000149  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000097  00000000  00000000  00000241  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000170  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d4  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000048  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>

void main()
{
DDRB=0xff;   //motor output
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
DDRA=0xf0;
  70:	80 ef       	ldi	r24, 0xF0	; 240
  72:	8a bb       	out	0x1a, r24	; 26

PORTA=0x0f;    //pull up
  74:	8f e0       	ldi	r24, 0x0F	; 15
  76:	8b bb       	out	0x1b, r24	; 27


while(1)
{
PORTA=0b01111111;    //ground
  78:	7f e7       	ldi	r23, 0x7F	; 127
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7a:	24 ed       	ldi	r18, 0xD4	; 212
  7c:	30 e3       	ldi	r19, 0x30	; 48
_delay_ms(50);       //**without delay one of the below condition is true for the 1st iteration**
if((PINA&0b00000001)==0){while((PINA&0b00000001)==0);PORTB=0b00001001;}//_delay_ms(2000);}  //key(r1,c1)  forward
  7e:	69 e0       	ldi	r22, 0x09	; 9
if((PINA&0b00000010)==0){while((PINA&0b00000010)==0);PORTB=0b00001000;}//_delay_ms(2000);}  //key(r1,c2)  left
  80:	58 e0       	ldi	r21, 0x08	; 8
if((PINA&0b00000100)==0){while((PINA&0b00000100)==0);PORTB=0b00000001;}//_delay_ms(2000);}  //key(r1,c3)  right
  82:	41 e0       	ldi	r20, 0x01	; 1
PORTA=0x0f;    //pull up


while(1)
{
PORTA=0b01111111;    //ground
  84:	7b bb       	out	0x1b, r23	; 27
  86:	c9 01       	movw	r24, r18
  88:	01 97       	sbiw	r24, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <main+0x1c>
_delay_ms(50);       //**without delay one of the below condition is true for the 1st iteration**
if((PINA&0b00000001)==0){while((PINA&0b00000001)==0);PORTB=0b00001001;}//_delay_ms(2000);}  //key(r1,c1)  forward
  8c:	c8 99       	sbic	0x19, 0	; 25
  8e:	03 c0       	rjmp	.+6      	; 0x96 <main+0x2a>
  90:	c8 9b       	sbis	0x19, 0	; 25
  92:	fe cf       	rjmp	.-4      	; 0x90 <main+0x24>
  94:	68 bb       	out	0x18, r22	; 24
if((PINA&0b00000010)==0){while((PINA&0b00000010)==0);PORTB=0b00001000;}//_delay_ms(2000);}  //key(r1,c2)  left
  96:	c9 99       	sbic	0x19, 1	; 25
  98:	03 c0       	rjmp	.+6      	; 0xa0 <main+0x34>
  9a:	c9 9b       	sbis	0x19, 1	; 25
  9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0x2e>
  9e:	58 bb       	out	0x18, r21	; 24
if((PINA&0b00000100)==0){while((PINA&0b00000100)==0);PORTB=0b00000001;}//_delay_ms(2000);}  //key(r1,c3)  right
  a0:	ca 99       	sbic	0x19, 2	; 25
  a2:	03 c0       	rjmp	.+6      	; 0xaa <main+0x3e>
  a4:	ca 9b       	sbis	0x19, 2	; 25
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <main+0x38>
  a8:	48 bb       	out	0x18, r20	; 24
if((PINA&0b00001000)==0){while((PINA&0b00001000)==0);PORTB=0b00000000;}//_delay_ms(2000);}  //key(r1,c4)  stop
  aa:	cb 99       	sbic	0x19, 3	; 25
  ac:	eb cf       	rjmp	.-42     	; 0x84 <main+0x18>
  ae:	cb 9b       	sbis	0x19, 3	; 25
  b0:	fe cf       	rjmp	.-4      	; 0xae <main+0x42>
  b2:	18 ba       	out	0x18, r1	; 24
  b4:	e7 cf       	rjmp	.-50     	; 0x84 <main+0x18>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
