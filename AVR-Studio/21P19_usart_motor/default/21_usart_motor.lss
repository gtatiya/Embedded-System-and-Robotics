
21_usart_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002d  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000e9  00000000  00000000  00000175  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ac  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000ef  00000000  00000000  0000030a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000008f  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
void trans(int);   //Transmission w.r.t controller
int rec();         //receive w.r.t. controller

int main()
{
UCSRB=0x18;
  6c:	88 e1       	ldi	r24, 0x18	; 24
  6e:	8a b9       	out	0x0a, r24	; 10
UCSRC=0x86;
  70:	86 e8       	ldi	r24, 0x86	; 134
  72:	80 bd       	out	0x20, r24	; 32

UBRRL=51;
  74:	83 e3       	ldi	r24, 0x33	; 51
  76:	89 b9       	out	0x09, r24	; 9
DDRB=0xff;
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	87 bb       	out	0x17, r24	; 23
int x=rec();  //receive from PC

if(x==56){PORTB=0b00001001;} //ascii value of 8 is 56 //press 8 for forward
if(x==52){PORTB=0b00001000;} //ascii value of 4 is 52 //press 4 for left
if(x==54){PORTB=0b00000001;} //ascii value of 6 is 54 //press 6 for right
if(x==50){PORTB=0b00000110;} //ascii value of 2 is 50 //press 2 for backward
  7c:	46 e0       	ldi	r20, 0x06	; 6
{
int x=rec();  //receive from PC

if(x==56){PORTB=0b00001001;} //ascii value of 8 is 56 //press 8 for forward
if(x==52){PORTB=0b00001000;} //ascii value of 4 is 52 //press 4 for left
if(x==54){PORTB=0b00000001;} //ascii value of 6 is 54 //press 6 for right
  7e:	31 e0       	ldi	r19, 0x01	; 1
while(1)
{
int x=rec();  //receive from PC

if(x==56){PORTB=0b00001001;} //ascii value of 8 is 56 //press 8 for forward
if(x==52){PORTB=0b00001000;} //ascii value of 4 is 52 //press 4 for left
  80:	28 e0       	ldi	r18, 0x08	; 8
DDRB=0xff;
while(1)
{
int x=rec();  //receive from PC

if(x==56){PORTB=0b00001001;} //ascii value of 8 is 56 //press 8 for forward
  82:	99 e0       	ldi	r25, 0x09	; 9

void trans(int i)
{while((UCSRA&0x20)==0); UDR=i;}

int rec()
{while((UCSRA&0x80)==0); return (UDR);}
  84:	5f 9b       	sbis	0x0b, 7	; 11
  86:	fe cf       	rjmp	.-4      	; 0x84 <main+0x18>
  88:	8c b1       	in	r24, 0x0c	; 12
  8a:	e8 2f       	mov	r30, r24
  8c:	f0 e0       	ldi	r31, 0x00	; 0
DDRB=0xff;
while(1)
{
int x=rec();  //receive from PC

if(x==56){PORTB=0b00001001;} //ascii value of 8 is 56 //press 8 for forward
  8e:	e8 33       	cpi	r30, 0x38	; 56
  90:	f1 05       	cpc	r31, r1
  92:	11 f4       	brne	.+4      	; 0x98 <main+0x2c>
  94:	90 83       	st	Z, r25
  96:	0f c0       	rjmp	.+30     	; 0xb6 <main+0x4a>
if(x==52){PORTB=0b00001000;} //ascii value of 4 is 52 //press 4 for left
  98:	e4 33       	cpi	r30, 0x34	; 52
  9a:	f1 05       	cpc	r31, r1
  9c:	11 f4       	brne	.+4      	; 0xa2 <main+0x36>
  9e:	28 bb       	out	0x18, r18	; 24
  a0:	f1 cf       	rjmp	.-30     	; 0x84 <main+0x18>
if(x==54){PORTB=0b00000001;} //ascii value of 6 is 54 //press 6 for right
  a2:	e6 33       	cpi	r30, 0x36	; 54
  a4:	f1 05       	cpc	r31, r1
  a6:	11 f4       	brne	.+4      	; 0xac <main+0x40>
  a8:	38 bb       	out	0x18, r19	; 24
  aa:	ec cf       	rjmp	.-40     	; 0x84 <main+0x18>
if(x==50){PORTB=0b00000110;} //ascii value of 2 is 50 //press 2 for backward
  ac:	e2 33       	cpi	r30, 0x32	; 50
  ae:	f1 05       	cpc	r31, r1
  b0:	11 f4       	brne	.+4      	; 0xb6 <main+0x4a>
  b2:	48 bb       	out	0x18, r20	; 24
  b4:	e7 cf       	rjmp	.-50     	; 0x84 <main+0x18>
if(x==53){PORTB=0b00000000;} //ascii value of 5 is 53 //press 0 to stop
  b6:	f5 97       	sbiw	r30, 0x35	; 53
  b8:	29 f7       	brne	.-54     	; 0x84 <main+0x18>
  ba:	18 ba       	out	0x18, r1	; 24
  bc:	e3 cf       	rjmp	.-58     	; 0x84 <main+0x18>

000000be <trans>:

}


void trans(int i)
{while((UCSRA&0x20)==0); UDR=i;}
  be:	5d 9b       	sbis	0x0b, 5	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <trans>
  c2:	8c b9       	out	0x0c, r24	; 12
  c4:	08 95       	ret

000000c6 <rec>:

int rec()
{while((UCSRA&0x80)==0); return (UDR);}
  c6:	5f 9b       	sbis	0x0b, 7	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <rec>
  ca:	8c b1       	in	r24, 0x0c	; 12
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	08 95       	ret

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
