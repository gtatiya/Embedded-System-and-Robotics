
10_interface_keypad+lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000288  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000288  000002fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000078  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004bd  00000000  00000000  000003a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000176  00000000  00000000  00000863  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003fb  00000000  00000000  000009d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011f  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000160  00000000  00000000  00000f83  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  000010e3  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <main>
  8a:	0c 94 42 01 	jmp	0x284	; 0x284 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_cmd>:
dis_cmd(0x0C);
dis_cmd(0x06);
}

void lcd_cmd(int x)
{
  92:	82 bb       	out	0x12, r24	; 18
PORTD=x;
PORTD&=~(1<<rs);
  94:	90 98       	cbi	0x12, 0	; 18
PORTD&=~(1<<rw);
  96:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
  98:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	8a ef       	ldi	r24, 0xFA	; 250
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_cmd+0xc>
_delay_ms(1);
PORTD&=~(1<<en);
  a2:	92 98       	cbi	0x12, 2	; 18
}
  a4:	08 95       	ret

000000a6 <dis_cmd>:

void dis_cmd(int x)
{
  a6:	9c 01       	movw	r18, r24
  a8:	20 7f       	andi	r18, 0xF0	; 240
  aa:	30 70       	andi	r19, 0x00	; 0
  ac:	22 bb       	out	0x12, r18	; 18
}

void lcd_cmd(int x)
{
PORTD=x;
PORTD&=~(1<<rs);
  ae:	90 98       	cbi	0x12, 0	; 18
PORTD&=~(1<<rw);
  b0:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
  b2:	92 9a       	sbi	0x12, 2	; 18
  b4:	2a ef       	ldi	r18, 0xFA	; 250
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	f9 01       	movw	r30, r18
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <dis_cmd+0x14>
_delay_ms(1);
PORTD&=~(1<<en);
  be:	92 98       	cbi	0x12, 2	; 18
dis_cmd(0x06);
}

void lcd_cmd(int x)
{
PORTD=x;
  c0:	44 e0       	ldi	r20, 0x04	; 4
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	4a 95       	dec	r20
  c8:	e1 f7       	brne	.-8      	; 0xc2 <dis_cmd+0x1c>
  ca:	90 70       	andi	r25, 0x00	; 0
  cc:	82 bb       	out	0x12, r24	; 18
PORTD&=~(1<<rs);
  ce:	90 98       	cbi	0x12, 0	; 18
PORTD&=~(1<<rw);
  d0:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
  d2:	92 9a       	sbi	0x12, 2	; 18
  d4:	c9 01       	movw	r24, r18
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <dis_cmd+0x30>
_delay_ms(1);
PORTD&=~(1<<en);
  da:	92 98       	cbi	0x12, 2	; 18
int x1;
x1=x&0xf0;
lcd_cmd(x1);
x1=(x<<4)&0xf0;
lcd_cmd(x1);
}
  dc:	08 95       	ret

000000de <lcd_init>:
 dis_cmd(0x06);
}


void lcd_init()
{
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
dis_cmd(0x02);
dis_cmd(0x28);
  e6:	88 e2       	ldi	r24, 0x28	; 40
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
dis_cmd(0x0C);
  ee:	8c e0       	ldi	r24, 0x0C	; 12
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
dis_cmd(0x06);
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
}
  fe:	08 95       	ret

00000100 <lcd_data>:
x1=(x<<4)&0xf0;
lcd_cmd(x1);
}

void lcd_data(int x)
{
 100:	82 bb       	out	0x12, r24	; 18
PORTD=x;
PORTD|=(1<<rs);
 102:	90 9a       	sbi	0x12, 0	; 18
PORTD&=~(1<<rw);
 104:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
 106:	92 9a       	sbi	0x12, 2	; 18
 108:	8a ef       	ldi	r24, 0xFA	; 250
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_data+0xc>
_delay_ms(1);
PORTD&=~(1<<en);
 110:	92 98       	cbi	0x12, 2	; 18
}
 112:	08 95       	ret

00000114 <dis_data>:

void dis_data(int x)
{
 114:	9c 01       	movw	r18, r24
 116:	20 7f       	andi	r18, 0xF0	; 240
 118:	30 70       	andi	r19, 0x00	; 0
 11a:	22 bb       	out	0x12, r18	; 18
}

void lcd_data(int x)
{
PORTD=x;
PORTD|=(1<<rs);
 11c:	90 9a       	sbi	0x12, 0	; 18
PORTD&=~(1<<rw);
 11e:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
 120:	92 9a       	sbi	0x12, 2	; 18
 122:	2a ef       	ldi	r18, 0xFA	; 250
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	f9 01       	movw	r30, r18
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <dis_data+0x14>
_delay_ms(1);
PORTD&=~(1<<en);
 12c:	92 98       	cbi	0x12, 2	; 18
lcd_cmd(x1);
}

void lcd_data(int x)
{
PORTD=x;
 12e:	54 e0       	ldi	r21, 0x04	; 4
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	5a 95       	dec	r21
 136:	e1 f7       	brne	.-8      	; 0x130 <dis_data+0x1c>
 138:	90 70       	andi	r25, 0x00	; 0
 13a:	82 bb       	out	0x12, r24	; 18
PORTD|=(1<<rs);
 13c:	90 9a       	sbi	0x12, 0	; 18
PORTD&=~(1<<rw);
 13e:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
 140:	92 9a       	sbi	0x12, 2	; 18
 142:	c9 01       	movw	r24, r18
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <dis_data+0x30>
_delay_ms(1);
PORTD&=~(1<<en);
 148:	92 98       	cbi	0x12, 2	; 18
int x1;
x1=x&0xf0;
lcd_data(x1);
x1=(x<<4)&0xf0;
lcd_data(x1);
}
 14a:	08 95       	ret

0000014c <lcd_number>:
  dis_data(str[i]);
  }
}

void lcd_number(int abc)
{
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	ec 01       	movw	r28, r24
 dis_cmd(0x04);
 152:	84 e0       	ldi	r24, 0x04	; 4
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
 15a:	0e c0       	rjmp	.+28     	; 0x178 <lcd_number+0x2c>
 unsigned int d=0;
 while (abc!=0)
  {
   d=abc%10;
   dis_data(d+48);
 15c:	ce 01       	movw	r24, r28
 15e:	6a e0       	ldi	r22, 0x0A	; 10
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	0e 94 1b 01 	call	0x236	; 0x236 <__divmodhi4>
 166:	c0 96       	adiw	r24, 0x30	; 48
 168:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
   abc=abc/10;
 16c:	ce 01       	movw	r24, r28
 16e:	6a e0       	ldi	r22, 0x0A	; 10
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	0e 94 1b 01 	call	0x236	; 0x236 <__divmodhi4>
 176:	eb 01       	movw	r28, r22

void lcd_number(int abc)
{
 dis_cmd(0x04);
 unsigned int d=0;
 while (abc!=0)
 178:	20 97       	sbiw	r28, 0x00	; 0
 17a:	81 f7       	brne	.-32     	; 0x15c <lcd_number+0x10>
   dis_data(d+48);
   abc=abc/10;
   }
   
    
 dis_cmd(0x06);
 17c:	86 e0       	ldi	r24, 0x06	; 6
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <lcd_string>:

return 0;
}

void lcd_string(char *str)
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	ec 01       	movw	r28, r24
 190:	03 c0       	rjmp	.+6      	; 0x198 <lcd_string+0xe>

  for(int i=0;str[i]!='\0';i++)
  {
  dis_data(str[i]);
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
}

void lcd_string(char *str)
{

  for(int i=0;str[i]!='\0';i++)
 198:	89 91       	ld	r24, Y+
 19a:	88 23       	and	r24, r24
 19c:	d1 f7       	brne	.-12     	; 0x192 <lcd_string+0x8>
  {
  dis_data(str[i]);
  }
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <main>:
void lcd_string(char *str);
void lcd_number(int);


int main()
{
 1a4:	ff 92       	push	r15
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29


DDRA=0x00;
 1ae:	1a ba       	out	0x1a, r1	; 26
DDRD=0xff;
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	81 bb       	out	0x11, r24	; 17
DDRB=0x0f;
 1b4:	1f e0       	ldi	r17, 0x0F	; 15
 1b6:	17 bb       	out	0x17, r17	; 23
lcd_init();
 1b8:	0e 94 6f 00 	call	0xde	; 0xde <lcd_init>

PORTA=0x0f;
 1bc:	1b bb       	out	0x1b, r17	; 27
while(1)
{
PORTB=0b00001110;
 1be:	6e e0       	ldi	r22, 0x0E	; 14
 1c0:	f6 2e       	mov	r15, r22
 1c2:	09 e1       	ldi	r16, 0x19	; 25
 1c4:	10 e0       	ldi	r17, 0x00	; 0
 1c6:	c2 ee       	ldi	r28, 0xE2	; 226
 1c8:	d4 e0       	ldi	r29, 0x04	; 4
 1ca:	f8 ba       	out	0x18, r15	; 24

if ((PINA&0b00000001)==0)
 1cc:	c8 99       	sbic	0x19, 0	; 25
 1ce:	18 c0       	rjmp	.+48     	; 0x200 <main+0x5c>
{while((PINA&0b00000001)==0);
 1d0:	c8 9b       	sbis	0x19, 0	; 25
 1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <main+0x2c>
 dis_cmd(0x84);
 1d4:	84 e8       	ldi	r24, 0x84	; 132
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
 lcd_string("Forward");
 1dc:	80 e6       	ldi	r24, 0x60	; 96
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_string>
 1e4:	80 e2       	ldi	r24, 0x20	; 32
 1e6:	9e e4       	ldi	r25, 0x4E	; 78
 1e8:	f8 01       	movw	r30, r16
 1ea:	31 97       	sbiw	r30, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <main+0x46>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1ee:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1f0:	d9 f7       	brne	.-10     	; 0x1e8 <main+0x44>
 _delay_ms(2000);
 dis_cmd(0x01);
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
 1fa:	ce 01       	movw	r24, r28
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <main+0x58>
 _delay_ms(5);
 }

 if ((PINA&0b00000010)==0)
 200:	c9 99       	sbic	0x19, 1	; 25
 202:	e3 cf       	rjmp	.-58     	; 0x1ca <main+0x26>
{while((PINA&0b00000010)==0);
 204:	c9 9b       	sbis	0x19, 1	; 25
 206:	fe cf       	rjmp	.-4      	; 0x204 <main+0x60>
 dis_cmd(0x84);
 208:	84 e8       	ldi	r24, 0x84	; 132
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
 lcd_string("Backward");
 210:	88 e6       	ldi	r24, 0x68	; 104
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 c5 00 	call	0x18a	; 0x18a <lcd_string>
 218:	80 e2       	ldi	r24, 0x20	; 32
 21a:	9e e4       	ldi	r25, 0x4E	; 78
 21c:	f8 01       	movw	r30, r16
 21e:	31 97       	sbiw	r30, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <main+0x7a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 222:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 224:	d9 f7       	brne	.-10     	; 0x21c <main+0x78>
 _delay_ms(2000);
 dis_cmd(0x01);
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
 22e:	ce 01       	movw	r24, r28
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <main+0x8c>
 234:	ca cf       	rjmp	.-108    	; 0x1ca <main+0x26>

00000236 <__divmodhi4>:
 236:	97 fb       	bst	r25, 7
 238:	09 2e       	mov	r0, r25
 23a:	07 26       	eor	r0, r23
 23c:	0a d0       	rcall	.+20     	; 0x252 <__divmodhi4_neg1>
 23e:	77 fd       	sbrc	r23, 7
 240:	04 d0       	rcall	.+8      	; 0x24a <__divmodhi4_neg2>
 242:	0c d0       	rcall	.+24     	; 0x25c <__udivmodhi4>
 244:	06 d0       	rcall	.+12     	; 0x252 <__divmodhi4_neg1>
 246:	00 20       	and	r0, r0
 248:	1a f4       	brpl	.+6      	; 0x250 <__divmodhi4_exit>

0000024a <__divmodhi4_neg2>:
 24a:	70 95       	com	r23
 24c:	61 95       	neg	r22
 24e:	7f 4f       	sbci	r23, 0xFF	; 255

00000250 <__divmodhi4_exit>:
 250:	08 95       	ret

00000252 <__divmodhi4_neg1>:
 252:	f6 f7       	brtc	.-4      	; 0x250 <__divmodhi4_exit>
 254:	90 95       	com	r25
 256:	81 95       	neg	r24
 258:	9f 4f       	sbci	r25, 0xFF	; 255
 25a:	08 95       	ret

0000025c <__udivmodhi4>:
 25c:	aa 1b       	sub	r26, r26
 25e:	bb 1b       	sub	r27, r27
 260:	51 e1       	ldi	r21, 0x11	; 17
 262:	07 c0       	rjmp	.+14     	; 0x272 <__udivmodhi4_ep>

00000264 <__udivmodhi4_loop>:
 264:	aa 1f       	adc	r26, r26
 266:	bb 1f       	adc	r27, r27
 268:	a6 17       	cp	r26, r22
 26a:	b7 07       	cpc	r27, r23
 26c:	10 f0       	brcs	.+4      	; 0x272 <__udivmodhi4_ep>
 26e:	a6 1b       	sub	r26, r22
 270:	b7 0b       	sbc	r27, r23

00000272 <__udivmodhi4_ep>:
 272:	88 1f       	adc	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	5a 95       	dec	r21
 278:	a9 f7       	brne	.-22     	; 0x264 <__udivmodhi4_loop>
 27a:	80 95       	com	r24
 27c:	90 95       	com	r25
 27e:	bc 01       	movw	r22, r24
 280:	cd 01       	movw	r24, r26
 282:	08 95       	ret

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
