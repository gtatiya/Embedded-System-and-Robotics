
21_usart_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000023a  000002ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000008a  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000036d  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000019d  00000000  00000000  000006cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002e3  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00000b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000104  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000100  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 c1 00 	call	0x182	; 0x182 <main>
  7a:	0c 94 1b 01 	jmp	0x236	; 0x236 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <trans>:
}
return 0;
}

void trans(int i)
{while((UCSRA&0x20)==0); UDR=i;}
  82:	5d 9b       	sbis	0x0b, 5	; 11
  84:	fe cf       	rjmp	.-4      	; 0x82 <trans>
  86:	8c b9       	out	0x0c, r24	; 12
  88:	08 95       	ret

0000008a <rec>:

int rec()
{while((UCSRA&0x80)==0); return (UDR);}
  8a:	5f 9b       	sbis	0x0b, 7	; 11
  8c:	fe cf       	rjmp	.-4      	; 0x8a <rec>
  8e:	8c b1       	in	r24, 0x0c	; 12
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	08 95       	ret

00000094 <lcd_cmd>:
dis_cmd(0x06);
}

void lcd_cmd(int x)
{
PORTD=x;
  94:	82 bb       	out	0x12, r24	; 18
PORTD&=~(1<<rs);
  96:	90 98       	cbi	0x12, 0	; 18
PORTD&=~(1<<rw);
  98:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
  9a:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9c:	8a ef       	ldi	r24, 0xFA	; 250
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_cmd+0xc>
_delay_ms(1);
PORTD&=~(1<<en);
  a4:	92 98       	cbi	0x12, 2	; 18
}
  a6:	08 95       	ret

000000a8 <dis_cmd>:

void dis_cmd(int x)
{
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	8c 01       	movw	r16, r24
int x1;
x1=x&0xf0;
lcd_cmd(x1);
  ae:	80 7f       	andi	r24, 0xF0	; 240
  b0:	90 70       	andi	r25, 0x00	; 0
  b2:	0e 94 4a 00 	call	0x94	; 0x94 <lcd_cmd>
x1=(x<<4)&0xf0;
lcd_cmd(x1);
  b6:	84 e0       	ldi	r24, 0x04	; 4
  b8:	00 0f       	add	r16, r16
  ba:	11 1f       	adc	r17, r17
  bc:	8a 95       	dec	r24
  be:	e1 f7       	brne	.-8      	; 0xb8 <dis_cmd+0x10>
  c0:	c8 01       	movw	r24, r16
  c2:	90 70       	andi	r25, 0x00	; 0
  c4:	0e 94 4a 00 	call	0x94	; 0x94 <lcd_cmd>
}
  c8:	1f 91       	pop	r17
  ca:	0f 91       	pop	r16
  cc:	08 95       	ret

000000ce <lcd_init>:
}


void lcd_init()
{
dis_cmd(0x02);
  ce:	82 e0       	ldi	r24, 0x02	; 2
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 54 00 	call	0xa8	; 0xa8 <dis_cmd>
dis_cmd(0x28);
  d6:	88 e2       	ldi	r24, 0x28	; 40
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 54 00 	call	0xa8	; 0xa8 <dis_cmd>
dis_cmd(0x0C);
  de:	8c e0       	ldi	r24, 0x0C	; 12
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 54 00 	call	0xa8	; 0xa8 <dis_cmd>
dis_cmd(0x06);
  e6:	86 e0       	ldi	r24, 0x06	; 6
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 54 00 	call	0xa8	; 0xa8 <dis_cmd>
}
  ee:	08 95       	ret

000000f0 <lcd_data>:
lcd_cmd(x1);
}

void lcd_data(int x)
{
PORTD=x;
  f0:	82 bb       	out	0x12, r24	; 18
PORTD|=(1<<rs);
  f2:	90 9a       	sbi	0x12, 0	; 18
PORTD&=~(1<<rw);
  f4:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
  f6:	92 9a       	sbi	0x12, 2	; 18
  f8:	8a ef       	ldi	r24, 0xFA	; 250
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <lcd_data+0xc>
_delay_ms(1);
PORTD&=~(1<<en);
 100:	92 98       	cbi	0x12, 2	; 18
}
 102:	08 95       	ret

00000104 <dis_data>:

void dis_data(int x)
{
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
 108:	8c 01       	movw	r16, r24
int x1;
x1=x&0xf0;
lcd_data(x1);
 10a:	80 7f       	andi	r24, 0xF0	; 240
 10c:	90 70       	andi	r25, 0x00	; 0
 10e:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_data>
x1=(x<<4)&0xf0;
lcd_data(x1);
 112:	94 e0       	ldi	r25, 0x04	; 4
 114:	00 0f       	add	r16, r16
 116:	11 1f       	adc	r17, r17
 118:	9a 95       	dec	r25
 11a:	e1 f7       	brne	.-8      	; 0x114 <dis_data+0x10>
 11c:	c8 01       	movw	r24, r16
 11e:	90 70       	andi	r25, 0x00	; 0
 120:	0e 94 78 00 	call	0xf0	; 0xf0 <lcd_data>
}
 124:	1f 91       	pop	r17
 126:	0f 91       	pop	r16
 128:	08 95       	ret

0000012a <lcd_number>:
  dis_data(str[i]);
  }
}

void lcd_number(int abc)
{
 12a:	0f 93       	push	r16
 12c:	1f 93       	push	r17
 12e:	8c 01       	movw	r16, r24
 dis_cmd(0x04);
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 54 00 	call	0xa8	; 0xa8 <dis_cmd>
 unsigned int d=0;
 //while (abc!=0)
  
   d=abc%10;
   dis_data(d+48);
 138:	c8 01       	movw	r24, r16
 13a:	6a e0       	ldi	r22, 0x0A	; 10
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__divmodhi4>
 142:	c0 96       	adiw	r24, 0x30	; 48
 144:	0e 94 82 00 	call	0x104	; 0x104 <dis_data>
   abc=abc/10;
   d=abc%10;
   dis_data(d+48);
 148:	c8 01       	movw	r24, r16
 14a:	6a e0       	ldi	r22, 0x0A	; 10
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__divmodhi4>
 152:	cb 01       	movw	r24, r22
 154:	6a e0       	ldi	r22, 0x0A	; 10
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__divmodhi4>
 15c:	c0 96       	adiw	r24, 0x30	; 48
 15e:	0e 94 82 00 	call	0x104	; 0x104 <dis_data>
   
 //dis_cmd(0x06);
}
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	08 95       	ret

00000168 <lcd_string>:
int rec()
{while((UCSRA&0x80)==0); return (UDR);}


void lcd_string(char *str)
{
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	ec 01       	movw	r28, r24
 16e:	03 c0       	rjmp	.+6      	; 0x176 <lcd_string+0xe>

  for(int i=0;str[i]!='\0';i++)
  {
  dis_data(str[i]);
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 82 00 	call	0x104	; 0x104 <dis_data>


void lcd_string(char *str)
{

  for(int i=0;str[i]!='\0';i++)
 176:	89 91       	ld	r24, Y+
 178:	88 23       	and	r24, r24
 17a:	d1 f7       	brne	.-12     	; 0x170 <lcd_string+0x8>
  {
  dis_data(str[i]);
  }
}
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <main>:

void trans(int);   //Transmission w.r.t controller
int rec();         //receive w.r.t. controller

int main()
{
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
DDRD=0xff;  //LCD output
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	81 bb       	out	0x11, r24	; 17
lcd_init();
 18e:	0e 94 67 00 	call	0xce	; 0xce <lcd_init>

UCSRB=0x18;
 192:	88 e1       	ldi	r24, 0x18	; 24
 194:	8a b9       	out	0x0a, r24	; 10
UCSRC=0x86;
 196:	86 e8       	ldi	r24, 0x86	; 134
 198:	80 bd       	out	0x20, r24	; 32
UBRRL=51;
 19a:	83 e3       	ldi	r24, 0x33	; 51
 19c:	89 b9       	out	0x09, r24	; 9

dis_cmd(0xc1);lcd_string("USART");
 19e:	81 ec       	ldi	r24, 0xC1	; 193
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 54 00 	call	0xa8	; 0xa8 <dis_cmd>
 1a6:	80 e6       	ldi	r24, 0x60	; 96
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_string>
 1ae:	04 ed       	ldi	r16, 0xD4	; 212
 1b0:	10 e3       	ldi	r17, 0x30	; 48

void trans(int i)
{while((UCSRA&0x20)==0); UDR=i;}

int rec()
{while((UCSRA&0x80)==0); return (UDR);}
 1b2:	5f 9b       	sbis	0x0b, 7	; 11
 1b4:	fe cf       	rjmp	.-4      	; 0x1b2 <main+0x30>
 1b6:	8c b1       	in	r24, 0x0c	; 12
 1b8:	c8 2f       	mov	r28, r24
 1ba:	d0 e0       	ldi	r29, 0x00	; 0

while(1)
{

int x =rec();                               //receive from PC
dis_cmd(0x01);_delay_ms(50);
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 54 00 	call	0xa8	; 0xa8 <dis_cmd>
 1c4:	c8 01       	movw	r24, r16
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0x44>
dis_cmd(0x81);
 1ca:	81 e8       	ldi	r24, 0x81	; 129
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 54 00 	call	0xa8	; 0xa8 <dis_cmd>
lcd_number(x);;_delay_ms(50);
 1d2:	ce 01       	movw	r24, r28
 1d4:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_number>
 1d8:	c8 01       	movw	r24, r16
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <main+0x58>
}
return 0;
}

void trans(int i)
{while((UCSRA&0x20)==0); UDR=i;}
 1de:	5d 9b       	sbis	0x0b, 5	; 11
 1e0:	fe cf       	rjmp	.-4      	; 0x1de <main+0x5c>
 1e2:	21 96       	adiw	r28, 0x01	; 1
 1e4:	cc b9       	out	0x0c, r28	; 12
 1e6:	e5 cf       	rjmp	.-54     	; 0x1b2 <main+0x30>

000001e8 <__divmodhi4>:
 1e8:	97 fb       	bst	r25, 7
 1ea:	09 2e       	mov	r0, r25
 1ec:	07 26       	eor	r0, r23
 1ee:	0a d0       	rcall	.+20     	; 0x204 <__divmodhi4_neg1>
 1f0:	77 fd       	sbrc	r23, 7
 1f2:	04 d0       	rcall	.+8      	; 0x1fc <__divmodhi4_neg2>
 1f4:	0c d0       	rcall	.+24     	; 0x20e <__udivmodhi4>
 1f6:	06 d0       	rcall	.+12     	; 0x204 <__divmodhi4_neg1>
 1f8:	00 20       	and	r0, r0
 1fa:	1a f4       	brpl	.+6      	; 0x202 <__divmodhi4_exit>

000001fc <__divmodhi4_neg2>:
 1fc:	70 95       	com	r23
 1fe:	61 95       	neg	r22
 200:	7f 4f       	sbci	r23, 0xFF	; 255

00000202 <__divmodhi4_exit>:
 202:	08 95       	ret

00000204 <__divmodhi4_neg1>:
 204:	f6 f7       	brtc	.-4      	; 0x202 <__divmodhi4_exit>
 206:	90 95       	com	r25
 208:	81 95       	neg	r24
 20a:	9f 4f       	sbci	r25, 0xFF	; 255
 20c:	08 95       	ret

0000020e <__udivmodhi4>:
 20e:	aa 1b       	sub	r26, r26
 210:	bb 1b       	sub	r27, r27
 212:	51 e1       	ldi	r21, 0x11	; 17
 214:	07 c0       	rjmp	.+14     	; 0x224 <__udivmodhi4_ep>

00000216 <__udivmodhi4_loop>:
 216:	aa 1f       	adc	r26, r26
 218:	bb 1f       	adc	r27, r27
 21a:	a6 17       	cp	r26, r22
 21c:	b7 07       	cpc	r27, r23
 21e:	10 f0       	brcs	.+4      	; 0x224 <__udivmodhi4_ep>
 220:	a6 1b       	sub	r26, r22
 222:	b7 0b       	sbc	r27, r23

00000224 <__udivmodhi4_ep>:
 224:	88 1f       	adc	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	5a 95       	dec	r21
 22a:	a9 f7       	brne	.-22     	; 0x216 <__udivmodhi4_loop>
 22c:	80 95       	com	r24
 22e:	90 95       	com	r25
 230:	bc 01       	movw	r22, r24
 232:	cd 01       	movw	r24, r26
 234:	08 95       	ret

00000236 <_exit>:
 236:	f8 94       	cli

00000238 <__stop_program>:
 238:	ff cf       	rjmp	.-2      	; 0x238 <__stop_program>
