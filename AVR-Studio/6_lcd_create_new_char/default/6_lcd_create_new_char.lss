
6_lcd_create_new_char.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000378  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000097  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000420  00000000  00000000  00000483  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000169  00000000  00000000  000008a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000004ec  00000000  00000000  00000a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000d0  00000000  00000000  00000ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000120  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000a0  00000000  00000000  000010e8  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 66 01 	call	0x2cc	; 0x2cc <main>
  8a:	0c 94 ba 01 	jmp	0x374	; 0x374 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <lcd_cmd>:
dis_cmd(0x0C);
dis_cmd(0x06);
}

void lcd_cmd(int x)
{
  92:	82 bb       	out	0x12, r24	; 18
PORTD=x;
PORTD&=~(1<<rs);
  94:	90 98       	cbi	0x12, 0	; 18
PORTD&=~(1<<rw);
  96:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
  98:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	8a ef       	ldi	r24, 0xFA	; 250
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_cmd+0xc>
_delay_ms(1);
PORTD&=~(1<<en);
  a2:	92 98       	cbi	0x12, 2	; 18
}
  a4:	08 95       	ret

000000a6 <dis_cmd>:

void dis_cmd(int x)
{
  a6:	9c 01       	movw	r18, r24
  a8:	20 7f       	andi	r18, 0xF0	; 240
  aa:	30 70       	andi	r19, 0x00	; 0
  ac:	22 bb       	out	0x12, r18	; 18
}

void lcd_cmd(int x)
{
PORTD=x;
PORTD&=~(1<<rs);
  ae:	90 98       	cbi	0x12, 0	; 18
PORTD&=~(1<<rw);
  b0:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
  b2:	92 9a       	sbi	0x12, 2	; 18
  b4:	2a ef       	ldi	r18, 0xFA	; 250
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	f9 01       	movw	r30, r18
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <dis_cmd+0x14>
_delay_ms(1);
PORTD&=~(1<<en);
  be:	92 98       	cbi	0x12, 2	; 18
dis_cmd(0x06);
}

void lcd_cmd(int x)
{
PORTD=x;
  c0:	44 e0       	ldi	r20, 0x04	; 4
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	4a 95       	dec	r20
  c8:	e1 f7       	brne	.-8      	; 0xc2 <dis_cmd+0x1c>
  ca:	90 70       	andi	r25, 0x00	; 0
  cc:	82 bb       	out	0x12, r24	; 18
PORTD&=~(1<<rs);
  ce:	90 98       	cbi	0x12, 0	; 18
PORTD&=~(1<<rw);
  d0:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
  d2:	92 9a       	sbi	0x12, 2	; 18
  d4:	c9 01       	movw	r24, r18
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <dis_cmd+0x30>
_delay_ms(1);
PORTD&=~(1<<en);
  da:	92 98       	cbi	0x12, 2	; 18
int x1;
x1=x&0xf0;
lcd_cmd(x1);
x1=(x<<4)&0xf0;
lcd_cmd(x1);
}
  dc:	08 95       	ret

000000de <lcd_init>:
 dis_cmd(0x06);
}


void lcd_init()
{
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
dis_cmd(0x02);
dis_cmd(0x28);
  e6:	88 e2       	ldi	r24, 0x28	; 40
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
dis_cmd(0x0C);
  ee:	8c e0       	ldi	r24, 0x0C	; 12
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
dis_cmd(0x06);
  f6:	86 e0       	ldi	r24, 0x06	; 6
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
}
  fe:	08 95       	ret

00000100 <lcd_data>:
x1=(x<<4)&0xf0;
lcd_cmd(x1);
}

void lcd_data(int x)
{
 100:	82 bb       	out	0x12, r24	; 18
PORTD=x;
PORTD|=(1<<rs);
 102:	90 9a       	sbi	0x12, 0	; 18
PORTD&=~(1<<rw);
 104:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
 106:	92 9a       	sbi	0x12, 2	; 18
 108:	8a ef       	ldi	r24, 0xFA	; 250
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_data+0xc>
_delay_ms(1);
PORTD&=~(1<<en);
 110:	92 98       	cbi	0x12, 2	; 18
}
 112:	08 95       	ret

00000114 <dis_data>:

void dis_data(int x)
{
 114:	9c 01       	movw	r18, r24
 116:	20 7f       	andi	r18, 0xF0	; 240
 118:	30 70       	andi	r19, 0x00	; 0
 11a:	22 bb       	out	0x12, r18	; 18
}

void lcd_data(int x)
{
PORTD=x;
PORTD|=(1<<rs);
 11c:	90 9a       	sbi	0x12, 0	; 18
PORTD&=~(1<<rw);
 11e:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
 120:	92 9a       	sbi	0x12, 2	; 18
 122:	2a ef       	ldi	r18, 0xFA	; 250
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	f9 01       	movw	r30, r18
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <dis_data+0x14>
_delay_ms(1);
PORTD&=~(1<<en);
 12c:	92 98       	cbi	0x12, 2	; 18
lcd_cmd(x1);
}

void lcd_data(int x)
{
PORTD=x;
 12e:	54 e0       	ldi	r21, 0x04	; 4
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	5a 95       	dec	r21
 136:	e1 f7       	brne	.-8      	; 0x130 <dis_data+0x1c>
 138:	90 70       	andi	r25, 0x00	; 0
 13a:	82 bb       	out	0x12, r24	; 18
PORTD|=(1<<rs);
 13c:	90 9a       	sbi	0x12, 0	; 18
PORTD&=~(1<<rw);
 13e:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
 140:	92 9a       	sbi	0x12, 2	; 18
 142:	c9 01       	movw	r24, r18
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <dis_data+0x30>
_delay_ms(1);
PORTD&=~(1<<en);
 148:	92 98       	cbi	0x12, 2	; 18
int x1;
x1=x&0xf0;
lcd_data(x1);
x1=(x<<4)&0xf0;
lcd_data(x1);
}
 14a:	08 95       	ret

0000014c <lcd_number>:
  dis_data(str[i]);
  }
}

void lcd_number(int abc)
{
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	ec 01       	movw	r28, r24
 dis_cmd(0x04);
 152:	84 e0       	ldi	r24, 0x04	; 4
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
 15a:	0e c0       	rjmp	.+28     	; 0x178 <lcd_number+0x2c>
 unsigned int d=0;
 while (abc!=0)
  {
   d=abc%10;
   dis_data(d+48);
 15c:	ce 01       	movw	r24, r28
 15e:	6a e0       	ldi	r22, 0x0A	; 10
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	0e 94 93 01 	call	0x326	; 0x326 <__divmodhi4>
 166:	c0 96       	adiw	r24, 0x30	; 48
 168:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
   abc=abc/10;
 16c:	ce 01       	movw	r24, r28
 16e:	6a e0       	ldi	r22, 0x0A	; 10
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	0e 94 93 01 	call	0x326	; 0x326 <__divmodhi4>
 176:	eb 01       	movw	r28, r22

void lcd_number(int abc)
{
 dis_cmd(0x04);
 unsigned int d=0;
 while (abc!=0)
 178:	20 97       	sbiw	r28, 0x00	; 0
 17a:	81 f7       	brne	.-32     	; 0x15c <lcd_number+0x10>
   dis_data(d+48);
   abc=abc/10;
   }
   
    
 dis_cmd(0x06);
 17c:	86 e0       	ldi	r24, 0x06	; 6
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <lcd_string>:
dis_data(0x04);
dis_data(0x00);
dis_data(0x00);
}
void lcd_string(char *str)
{
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	ec 01       	movw	r28, r24
 190:	03 c0       	rjmp	.+6      	; 0x198 <lcd_string+0xe>

  for(int i=0;str[i]!='\0';i++)
  {
  dis_data(str[i]);
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x00);
}
void lcd_string(char *str)
{

  for(int i=0;str[i]!='\0';i++)
 198:	89 91       	ld	r24, Y+
 19a:	88 23       	and	r24, r24
 19c:	d1 f7       	brne	.-12     	; 0x192 <lcd_string+0x8>
  {
  dis_data(str[i]);
  }
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <um>:
dis_data(0x0e);
dis_data(0x00);
}

void um()
{
 1a4:	88 e5       	ldi	r24, 0x58	; 88
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
dis_cmd(0x58);
dis_data(0x0e);
 1ac:	8e e0       	ldi	r24, 0x0E	; 14
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x1f);
 1b4:	8f e1       	ldi	r24, 0x1F	; 31
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x1f);
 1bc:	8f e1       	ldi	r24, 0x1F	; 31
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x04);
 1c4:	84 e0       	ldi	r24, 0x04	; 4
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x04);
 1cc:	84 e0       	ldi	r24, 0x04	; 4
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x04);
 1d4:	84 e0       	ldi	r24, 0x04	; 4
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x00);
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x00);
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
}
 1ec:	08 95       	ret

000001ee <tv>:
dis_data(0x00);
dis_data(0x00);
}

void tv()
{
 1ee:	80 e5       	ldi	r24, 0x50	; 80
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
dis_cmd(0x50);
dis_data(0x00);
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x0e);
 1fe:	8e e0       	ldi	r24, 0x0E	; 14
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x0a);
 206:	8a e0       	ldi	r24, 0x0A	; 10
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x0a);
 20e:	8a e0       	ldi	r24, 0x0A	; 10
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x0a);
 216:	8a e0       	ldi	r24, 0x0A	; 10
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x04);
 21e:	84 e0       	ldi	r24, 0x04	; 4
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x0e);
 226:	8e e0       	ldi	r24, 0x0E	; 14
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x00);
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
}
 236:	08 95       	ret

00000238 <dru>:
dis_data(0x04);
dis_data(0x00);
}

void dru()
{
 238:	88 e4       	ldi	r24, 0x48	; 72
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
dis_cmd(0x48);
dis_data(0x00);
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0xff);
 248:	8f ef       	ldi	r24, 0xFF	; 255
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x0e);
 250:	8e e0       	ldi	r24, 0x0E	; 14
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x04);
 258:	84 e0       	ldi	r24, 0x04	; 4
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x0e);
 260:	8e e0       	ldi	r24, 0x0E	; 14
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0xff);
 268:	8f ef       	ldi	r24, 0xFF	; 255
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x00);
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x00);
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
}
 280:	08 95       	ret

00000282 <bell>:
return 0;
}


void bell()
{
 282:	80 e4       	ldi	r24, 0x40	; 64
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
dis_cmd(0x40);
dis_data(0x04);
 28a:	84 e0       	ldi	r24, 0x04	; 4
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x0e);
 292:	8e e0       	ldi	r24, 0x0E	; 14
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x1f);
 29a:	8f e1       	ldi	r24, 0x1F	; 31
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x1f);
 2a2:	8f e1       	ldi	r24, 0x1F	; 31
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x1f);
 2aa:	8f e1       	ldi	r24, 0x1F	; 31
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x04);
 2b2:	84 e0       	ldi	r24, 0x04	; 4
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x04);
 2ba:	84 e0       	ldi	r24, 0x04	; 4
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
dis_data(0x00);
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
}
 2ca:	08 95       	ret

000002cc <main>:
void dru();
void tv();
void um();

int main()
{
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	81 bb       	out	0x11, r24	; 17
DDRD=0xff;
lcd_init();
 2d0:	0e 94 6f 00 	call	0xde	; 0xde <lcd_init>
bell();
 2d4:	0e 94 41 01 	call	0x282	; 0x282 <bell>
dru();
 2d8:	0e 94 1c 01 	call	0x238	; 0x238 <dru>
tv();
 2dc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <tv>
um();
 2e0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <um>
while(1)
{
dis_cmd(0x82);
 2e4:	82 e8       	ldi	r24, 0x82	; 130
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
dis_data(0x00);
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>

dis_cmd(0x84);
 2f4:	84 e8       	ldi	r24, 0x84	; 132
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
dis_data(0x01);
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>

dis_cmd(0x86);
 304:	86 e8       	ldi	r24, 0x86	; 134
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
dis_data(0x02);
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>

dis_cmd(0x88);
 314:	88 e8       	ldi	r24, 0x88	; 136
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 53 00 	call	0xa6	; 0xa6 <dis_cmd>
dis_data(0x03);
 31c:	83 e0       	ldi	r24, 0x03	; 3
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 8a 00 	call	0x114	; 0x114 <dis_data>
 324:	df cf       	rjmp	.-66     	; 0x2e4 <main+0x18>

00000326 <__divmodhi4>:
 326:	97 fb       	bst	r25, 7
 328:	09 2e       	mov	r0, r25
 32a:	07 26       	eor	r0, r23
 32c:	0a d0       	rcall	.+20     	; 0x342 <__divmodhi4_neg1>
 32e:	77 fd       	sbrc	r23, 7
 330:	04 d0       	rcall	.+8      	; 0x33a <__divmodhi4_neg2>
 332:	0c d0       	rcall	.+24     	; 0x34c <__udivmodhi4>
 334:	06 d0       	rcall	.+12     	; 0x342 <__divmodhi4_neg1>
 336:	00 20       	and	r0, r0
 338:	1a f4       	brpl	.+6      	; 0x340 <__divmodhi4_exit>

0000033a <__divmodhi4_neg2>:
 33a:	70 95       	com	r23
 33c:	61 95       	neg	r22
 33e:	7f 4f       	sbci	r23, 0xFF	; 255

00000340 <__divmodhi4_exit>:
 340:	08 95       	ret

00000342 <__divmodhi4_neg1>:
 342:	f6 f7       	brtc	.-4      	; 0x340 <__divmodhi4_exit>
 344:	90 95       	com	r25
 346:	81 95       	neg	r24
 348:	9f 4f       	sbci	r25, 0xFF	; 255
 34a:	08 95       	ret

0000034c <__udivmodhi4>:
 34c:	aa 1b       	sub	r26, r26
 34e:	bb 1b       	sub	r27, r27
 350:	51 e1       	ldi	r21, 0x11	; 17
 352:	07 c0       	rjmp	.+14     	; 0x362 <__udivmodhi4_ep>

00000354 <__udivmodhi4_loop>:
 354:	aa 1f       	adc	r26, r26
 356:	bb 1f       	adc	r27, r27
 358:	a6 17       	cp	r26, r22
 35a:	b7 07       	cpc	r27, r23
 35c:	10 f0       	brcs	.+4      	; 0x362 <__udivmodhi4_ep>
 35e:	a6 1b       	sub	r26, r22
 360:	b7 0b       	sbc	r27, r23

00000362 <__udivmodhi4_ep>:
 362:	88 1f       	adc	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	5a 95       	dec	r21
 368:	a9 f7       	brne	.-22     	; 0x354 <__udivmodhi4_loop>
 36a:	80 95       	com	r24
 36c:	90 95       	com	r25
 36e:	bc 01       	movw	r22, r24
 370:	cd 01       	movw	r24, r26
 372:	08 95       	ret

00000374 <_exit>:
 374:	f8 94       	cli

00000376 <__stop_program>:
 376:	ff cf       	rjmp	.-2      	; 0x376 <__stop_program>
