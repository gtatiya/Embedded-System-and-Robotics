
19P18_touch_screen_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000320  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000320  00000394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000085  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000363  00000000  00000000  0000044d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000016a  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003c7  00000000  00000000  0000091a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000012a  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001a8  00000000  00000000  00000eae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  00001056  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  7a:	0c 94 8e 01 	jmp	0x31c	; 0x31c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <adc_read>:
}


unsigned int adc_read(unsigned chn)
{
ADMUX=chn|0x40;
  82:	80 64       	ori	r24, 0x40	; 64
  84:	87 b9       	out	0x07, r24	; 7
ADCSRA=0xd7;
  86:	87 ed       	ldi	r24, 0xD7	; 215
  88:	86 b9       	out	0x06, r24	; 6
while((ADCSRA&0x10)==0);
  8a:	34 9b       	sbis	0x06, 4	; 6
  8c:	fe cf       	rjmp	.-4      	; 0x8a <adc_read+0x8>
ADCSRA|=0x10;                //ADIF=1
  8e:	34 9a       	sbi	0x06, 4	; 6
//dis_cmd(0xc5);
//lcd_number(ADC);_delay_ms(1000);
return ADC;
  90:	24 b1       	in	r18, 0x04	; 4
  92:	35 b1       	in	r19, 0x05	; 5

}
  94:	c9 01       	movw	r24, r18
  96:	08 95       	ret

00000098 <lcd_cmd>:
dis_cmd(0x06);
}

void lcd_cmd(int x)
{
PORTD=x;
  98:	82 bb       	out	0x12, r24	; 18
PORTD&=~(1<<rs);
  9a:	90 98       	cbi	0x12, 0	; 18
PORTD&=~(1<<rw);
  9c:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
  9e:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a0:	8a ef       	ldi	r24, 0xFA	; 250
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_cmd+0xc>
_delay_ms(1);
PORTD&=~(1<<en);
  a8:	92 98       	cbi	0x12, 2	; 18
}
  aa:	08 95       	ret

000000ac <dis_cmd>:

void dis_cmd(int x)
{
  ac:	0f 93       	push	r16
  ae:	1f 93       	push	r17
  b0:	8c 01       	movw	r16, r24
int x1;
x1=x&0xf0;
lcd_cmd(x1);
  b2:	80 7f       	andi	r24, 0xF0	; 240
  b4:	90 70       	andi	r25, 0x00	; 0
  b6:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
x1=(x<<4)&0xf0;
lcd_cmd(x1);
  ba:	84 e0       	ldi	r24, 0x04	; 4
  bc:	00 0f       	add	r16, r16
  be:	11 1f       	adc	r17, r17
  c0:	8a 95       	dec	r24
  c2:	e1 f7       	brne	.-8      	; 0xbc <dis_cmd+0x10>
  c4:	c8 01       	movw	r24, r16
  c6:	90 70       	andi	r25, 0x00	; 0
  c8:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_cmd>
}
  cc:	1f 91       	pop	r17
  ce:	0f 91       	pop	r16
  d0:	08 95       	ret

000000d2 <lcd_init>:
}


void lcd_init()
{
dis_cmd(0x02);
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
dis_cmd(0x28);
  da:	88 e2       	ldi	r24, 0x28	; 40
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
dis_cmd(0x0C);
  e2:	8c e0       	ldi	r24, 0x0C	; 12
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
dis_cmd(0x06);
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
}
  f2:	08 95       	ret

000000f4 <lcd_data>:
lcd_cmd(x1);
}

void lcd_data(int x)
{
PORTD=x;
  f4:	82 bb       	out	0x12, r24	; 18
PORTD|=(1<<rs);
  f6:	90 9a       	sbi	0x12, 0	; 18
PORTD&=~(1<<rw);
  f8:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
  fa:	92 9a       	sbi	0x12, 2	; 18
  fc:	8a ef       	ldi	r24, 0xFA	; 250
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_data+0xc>
_delay_ms(1);
PORTD&=~(1<<en);
 104:	92 98       	cbi	0x12, 2	; 18
}
 106:	08 95       	ret

00000108 <dis_data>:

void dis_data(int x)
{
 108:	0f 93       	push	r16
 10a:	1f 93       	push	r17
 10c:	8c 01       	movw	r16, r24
int x1;
x1=x&0xf0;
lcd_data(x1);
 10e:	80 7f       	andi	r24, 0xF0	; 240
 110:	90 70       	andi	r25, 0x00	; 0
 112:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_data>
x1=(x<<4)&0xf0;
lcd_data(x1);
 116:	94 e0       	ldi	r25, 0x04	; 4
 118:	00 0f       	add	r16, r16
 11a:	11 1f       	adc	r17, r17
 11c:	9a 95       	dec	r25
 11e:	e1 f7       	brne	.-8      	; 0x118 <dis_data+0x10>
 120:	c8 01       	movw	r24, r16
 122:	90 70       	andi	r25, 0x00	; 0
 124:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_data>
}
 128:	1f 91       	pop	r17
 12a:	0f 91       	pop	r16
 12c:	08 95       	ret

0000012e <lcd_number>:
  dis_data(str[i]);
  }
}

void lcd_number(int abc)
{
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
 dis_cmd(0x04);
 134:	84 e0       	ldi	r24, 0x04	; 4
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
 13c:	0e c0       	rjmp	.+28     	; 0x15a <lcd_number+0x2c>
 unsigned int d=0;
 while (abc!=0)
  {
   d=abc%10;
   dis_data(d+48);
 13e:	ce 01       	movw	r24, r28
 140:	6a e0       	ldi	r22, 0x0A	; 10
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	0e 94 67 01 	call	0x2ce	; 0x2ce <__divmodhi4>
 148:	c0 96       	adiw	r24, 0x30	; 48
 14a:	0e 94 84 00 	call	0x108	; 0x108 <dis_data>
   abc=abc/10;
 14e:	ce 01       	movw	r24, r28
 150:	6a e0       	ldi	r22, 0x0A	; 10
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	0e 94 67 01 	call	0x2ce	; 0x2ce <__divmodhi4>
 158:	eb 01       	movw	r28, r22

void lcd_number(int abc)
{
 dis_cmd(0x04);
 unsigned int d=0;
 while (abc!=0)
 15a:	20 97       	sbiw	r28, 0x00	; 0
 15c:	81 f7       	brne	.-32     	; 0x13e <lcd_number+0x10>
   dis_data(d+48);
   abc=abc/10;
   }
   
    
 dis_cmd(0x06);
 15e:	86 e0       	ldi	r24, 0x06	; 6
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <lcd_string>:

}


void lcd_string(char *str)
{
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	ec 01       	movw	r28, r24
 172:	03 c0       	rjmp	.+6      	; 0x17a <lcd_string+0xe>

  for(int i=0;str[i]!='\0';i++)
  {
  dis_data(str[i]);
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 84 00 	call	0x108	; 0x108 <dis_data>


void lcd_string(char *str)
{

  for(int i=0;str[i]!='\0';i++)
 17a:	89 91       	ld	r24, Y+
 17c:	88 23       	and	r24, r24
 17e:	d1 f7       	brne	.-12     	; 0x174 <lcd_string+0x8>
  {
  dis_data(str[i]);
  }
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <main>:
void lcd_number(int);

unsigned int adc_read(unsigned);

int main()
{
 186:	5f 92       	push	r5
 188:	6f 92       	push	r6
 18a:	7f 92       	push	r7
 18c:	8f 92       	push	r8
 18e:	9f 92       	push	r9
 190:	af 92       	push	r10
 192:	bf 92       	push	r11
 194:	cf 92       	push	r12
 196:	df 92       	push	r13
 198:	ef 92       	push	r14
 19a:	ff 92       	push	r15
 19c:	0f 93       	push	r16
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
DDRD=0xff;
 1a4:	1f ef       	ldi	r17, 0xFF	; 255
 1a6:	11 bb       	out	0x11, r17	; 17
lcd_init();
 1a8:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_init>

DDRB=0xff;
 1ac:	17 bb       	out	0x17, r17	; 23

dis_cmd(0x81);
 1ae:	81 e8       	ldi	r24, 0x81	; 129
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
lcd_string("touch screen");_delay_ms(1000);
 1b6:	80 e6       	ldi	r24, 0x60	; 96
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_string>
 1be:	80 e1       	ldi	r24, 0x10	; 16
 1c0:	97 e2       	ldi	r25, 0x27	; 39
 1c2:	29 e1       	ldi	r18, 0x19	; 25
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	f9 01       	movw	r30, r18
 1c8:	31 97       	sbiw	r30, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0x42>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1ce:	d9 f7       	brne	.-10     	; 0x1c6 <main+0x40>
while(1)
{
DDRA=0b00000101;
 1d0:	f5 e0       	ldi	r31, 0x05	; 5
 1d2:	5f 2e       	mov	r5, r31
PORTA=0b00000001;
 1d4:	bb 24       	eor	r11, r11
 1d6:	b3 94       	inc	r11
int x=adc_read(1);
if(x<270){PORTB=0b00000110;while(adc_read(1)<270);}//back
if(x>590){PORTB=0b00001001;while(adc_read(1)>590);}//forward
 1d8:	e9 e0       	ldi	r30, 0x09	; 9
 1da:	6e 2e       	mov	r6, r30
while(1)
{
DDRA=0b00000101;
PORTA=0b00000001;
int x=adc_read(1);
if(x<270){PORTB=0b00000110;while(adc_read(1)<270);}//back
 1dc:	76 e0       	ldi	r23, 0x06	; 6
 1de:	77 2e       	mov	r7, r23
if(x>590){PORTB=0b00001001;while(adc_read(1)>590);}//forward

DDRA=0b00001010;
 1e0:	6a e0       	ldi	r22, 0x0A	; 10
 1e2:	86 2e       	mov	r8, r22
PORTA=0b00000010;
 1e4:	52 e0       	ldi	r21, 0x02	; 2
 1e6:	95 2e       	mov	r9, r21
 1e8:	44 ec       	ldi	r20, 0xC4	; 196
 1ea:	c4 2e       	mov	r12, r20
 1ec:	49 e0       	ldi	r20, 0x09	; 9
 1ee:	d4 2e       	mov	r13, r20



if((270<x<590)&&(y<370)){PORTB=0b00000001;while(adc_read(2)<370);}//right
//if((270<x<590)&&(370<y<670)){PORTB=0b00000000;while(370<adc_read(2)<670);}//stop
if((270<x<590)&&(y>670)){PORTB=0b00001000;while(adc_read(2)>670);}//right
 1f0:	3c e7       	ldi	r19, 0x7C	; 124
 1f2:	e3 2e       	mov	r14, r19
 1f4:	32 e9       	ldi	r19, 0x92	; 146
 1f6:	f3 2e       	mov	r15, r19
 1f8:	28 e0       	ldi	r18, 0x08	; 8
 1fa:	a2 2e       	mov	r10, r18

dis_cmd(0x81);
lcd_string("touch screen");_delay_ms(1000);
while(1)
{
DDRA=0b00000101;
 1fc:	5a ba       	out	0x1a, r5	; 26
PORTA=0b00000001;
 1fe:	bb ba       	out	0x1b, r11	; 27
int x=adc_read(1);
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 41 00 	call	0x82	; 0x82 <adc_read>
 208:	8c 01       	movw	r16, r24
if(x<270){PORTB=0b00000110;while(adc_read(1)<270);}//back
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	8e 30       	cpi	r24, 0x0E	; 14
 20e:	92 07       	cpc	r25, r18
 210:	4c f4       	brge	.+18     	; 0x224 <main+0x9e>
 212:	78 ba       	out	0x18, r7	; 24
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 41 00 	call	0x82	; 0x82 <adc_read>
 21c:	8e 50       	subi	r24, 0x0E	; 14
 21e:	91 40       	sbci	r25, 0x01	; 1
 220:	c8 f3       	brcs	.-14     	; 0x214 <main+0x8e>
 222:	0c c0       	rjmp	.+24     	; 0x23c <main+0xb6>
if(x>590){PORTB=0b00001001;while(adc_read(1)>590);}//forward
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	0f 34       	cpi	r16, 0x4F	; 79
 228:	18 07       	cpc	r17, r24
 22a:	44 f0       	brlt	.+16     	; 0x23c <main+0xb6>
 22c:	68 ba       	out	0x18, r6	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 41 00 	call	0x82	; 0x82 <adc_read>
 236:	8f 54       	subi	r24, 0x4F	; 79
 238:	92 40       	sbci	r25, 0x02	; 2
 23a:	c8 f7       	brcc	.-14     	; 0x22e <main+0xa8>

DDRA=0b00001010;
 23c:	8a ba       	out	0x1a, r8	; 26
PORTA=0b00000010;
 23e:	9b ba       	out	0x1b, r9	; 27
int y=adc_read(2);
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 41 00 	call	0x82	; 0x82 <adc_read>
 248:	ec 01       	movw	r28, r24

dis_cmd(0x01);_delay_ms(10);
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
 252:	c6 01       	movw	r24, r12
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <main+0xce>
dis_cmd(0x80);lcd_string("X=");
 258:	80 e8       	ldi	r24, 0x80	; 128
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
 260:	8d e6       	ldi	r24, 0x6D	; 109
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_string>
dis_cmd(0xc0);lcd_string("Y=");
 268:	80 ec       	ldi	r24, 0xC0	; 192
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
 270:	80 e7       	ldi	r24, 0x70	; 112
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_string>
dis_cmd(0x86);
 278:	86 e8       	ldi	r24, 0x86	; 134
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
lcd_number(x);
 280:	c8 01       	movw	r24, r16
 282:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_number>
dis_cmd(0xc6);
 286:	86 ec       	ldi	r24, 0xC6	; 198
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 56 00 	call	0xac	; 0xac <dis_cmd>
lcd_number(y);_delay_ms(150);
 28e:	ce 01       	movw	r24, r28
 290:	0e 94 97 00 	call	0x12e	; 0x12e <lcd_number>
 294:	c7 01       	movw	r24, r14
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <main+0x110>



if((270<x<590)&&(y<370)){PORTB=0b00000001;while(adc_read(2)<370);}//right
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	c2 37       	cpi	r28, 0x72	; 114
 29e:	d8 07       	cpc	r29, r24
 2a0:	4c f4       	brge	.+18     	; 0x2b4 <main+0x12e>
 2a2:	b8 ba       	out	0x18, r11	; 24
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 41 00 	call	0x82	; 0x82 <adc_read>
 2ac:	82 57       	subi	r24, 0x72	; 114
 2ae:	91 40       	sbci	r25, 0x01	; 1
 2b0:	c8 f3       	brcs	.-14     	; 0x2a4 <main+0x11e>
 2b2:	a4 cf       	rjmp	.-184    	; 0x1fc <main+0x76>
//if((270<x<590)&&(370<y<670)){PORTB=0b00000000;while(370<adc_read(2)<670);}//stop
if((270<x<590)&&(y>670)){PORTB=0b00001000;while(adc_read(2)>670);}//right
 2b4:	cf 59       	subi	r28, 0x9F	; 159
 2b6:	d2 40       	sbci	r29, 0x02	; 2
 2b8:	0c f4       	brge	.+2      	; 0x2bc <main+0x136>
 2ba:	a0 cf       	rjmp	.-192    	; 0x1fc <main+0x76>
 2bc:	a8 ba       	out	0x18, r10	; 24
 2be:	82 e0       	ldi	r24, 0x02	; 2
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 41 00 	call	0x82	; 0x82 <adc_read>
 2c6:	8f 59       	subi	r24, 0x9F	; 159
 2c8:	92 40       	sbci	r25, 0x02	; 2
 2ca:	c8 f7       	brcc	.-14     	; 0x2be <main+0x138>
 2cc:	97 cf       	rjmp	.-210    	; 0x1fc <main+0x76>

000002ce <__divmodhi4>:
 2ce:	97 fb       	bst	r25, 7
 2d0:	09 2e       	mov	r0, r25
 2d2:	07 26       	eor	r0, r23
 2d4:	0a d0       	rcall	.+20     	; 0x2ea <__divmodhi4_neg1>
 2d6:	77 fd       	sbrc	r23, 7
 2d8:	04 d0       	rcall	.+8      	; 0x2e2 <__divmodhi4_neg2>
 2da:	0c d0       	rcall	.+24     	; 0x2f4 <__udivmodhi4>
 2dc:	06 d0       	rcall	.+12     	; 0x2ea <__divmodhi4_neg1>
 2de:	00 20       	and	r0, r0
 2e0:	1a f4       	brpl	.+6      	; 0x2e8 <__divmodhi4_exit>

000002e2 <__divmodhi4_neg2>:
 2e2:	70 95       	com	r23
 2e4:	61 95       	neg	r22
 2e6:	7f 4f       	sbci	r23, 0xFF	; 255

000002e8 <__divmodhi4_exit>:
 2e8:	08 95       	ret

000002ea <__divmodhi4_neg1>:
 2ea:	f6 f7       	brtc	.-4      	; 0x2e8 <__divmodhi4_exit>
 2ec:	90 95       	com	r25
 2ee:	81 95       	neg	r24
 2f0:	9f 4f       	sbci	r25, 0xFF	; 255
 2f2:	08 95       	ret

000002f4 <__udivmodhi4>:
 2f4:	aa 1b       	sub	r26, r26
 2f6:	bb 1b       	sub	r27, r27
 2f8:	51 e1       	ldi	r21, 0x11	; 17
 2fa:	07 c0       	rjmp	.+14     	; 0x30a <__udivmodhi4_ep>

000002fc <__udivmodhi4_loop>:
 2fc:	aa 1f       	adc	r26, r26
 2fe:	bb 1f       	adc	r27, r27
 300:	a6 17       	cp	r26, r22
 302:	b7 07       	cpc	r27, r23
 304:	10 f0       	brcs	.+4      	; 0x30a <__udivmodhi4_ep>
 306:	a6 1b       	sub	r26, r22
 308:	b7 0b       	sbc	r27, r23

0000030a <__udivmodhi4_ep>:
 30a:	88 1f       	adc	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	5a 95       	dec	r21
 310:	a9 f7       	brne	.-22     	; 0x2fc <__udivmodhi4_loop>
 312:	80 95       	com	r24
 314:	90 95       	com	r25
 316:	bc 01       	movw	r22, r24
 318:	cd 01       	movw	r24, r26
 31a:	08 95       	ret

0000031c <_exit>:
 31c:	f8 94       	cli

0000031e <__stop_program>:
 31e:	ff cf       	rjmp	.-2      	; 0x31e <__stop_program>
