
12_pwm_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000198  00000000  00000000  00000153  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ef  00000000  00000000  000002eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000168  00000000  00000000  000003da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000544  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c4  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000d0  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000a8  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>

int main()
{  
DDRB=0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
TCCR0=0x61;   //PWM Mode is used for LED
  70:	81 e6       	ldi	r24, 0x61	; 97
  72:	83 bf       	out	0x33, r24	; 51
  74:	20 e0       	ldi	r18, 0x00	; 0
  76:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  78:	44 ef       	ldi	r20, 0xF4	; 244
  7a:	51 e0       	ldi	r21, 0x01	; 1
while(1)
{
for(int i=0;i<=255;i++)
{
OCR0=i;_delay_ms(2);        //OCR0 is connected to BP3 LED
  7c:	69 e1       	ldi	r22, 0x19	; 25
  7e:	70 e0       	ldi	r23, 0x00	; 0
  80:	06 c0       	rjmp	.+12     	; 0x8e <main+0x22>
  82:	2c bf       	out	0x3c, r18	; 60
  84:	ca 01       	movw	r24, r20
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <main+0x1a>
{  
DDRB=0xff;
TCCR0=0x61;   //PWM Mode is used for LED
while(1)
{
for(int i=0;i<=255;i++)
  8a:	2f 5f       	subi	r18, 0xFF	; 255
  8c:	3f 4f       	sbci	r19, 0xFF	; 255
  8e:	2f 3f       	cpi	r18, 0xFF	; 255
  90:	31 05       	cpc	r19, r1
  92:	b9 f3       	breq	.-18     	; 0x82 <main+0x16>
  94:	b4 f3       	brlt	.-20     	; 0x82 <main+0x16>
  96:	80 e1       	ldi	r24, 0x10	; 16
  98:	97 e2       	ldi	r25, 0x27	; 39
  9a:	fb 01       	movw	r30, r22
  9c:	31 97       	sbiw	r30, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <main+0x30>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a2:	d9 f7       	brne	.-10     	; 0x9a <main+0x2e>
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	90 e0       	ldi	r25, 0x00	; 0
OCR0=i;_delay_ms(2);        //OCR0 is connected to BP3 LED
}
_delay_ms(1000);
for(int i=255;i>=0;i--)
{
OCR0=i;_delay_ms(2);
  a8:	8c bf       	out	0x3c, r24	; 60
  aa:	fa 01       	movw	r30, r20
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x40>
for(int i=0;i<=255;i++)
{
OCR0=i;_delay_ms(2);        //OCR0 is connected to BP3 LED
}
_delay_ms(1000);
for(int i=255;i>=0;i--)
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	8f 3f       	cpi	r24, 0xFF	; 255
  b6:	92 07       	cpc	r25, r18
  b8:	b9 f7       	brne	.-18     	; 0xa8 <main+0x3c>
  ba:	20 e0       	ldi	r18, 0x00	; 0
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	e7 cf       	rjmp	.-50     	; 0x8e <main+0x22>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
