
10_keypad_values.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000476  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000004ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000080  00000000  00000000  000004ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000405  00000000  00000000  0000056a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000167  00000000  00000000  0000096f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000492  00000000  00000000  00000ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000a0  00000000  00000000  00000f68  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000111  00000000  00000000  00001008  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000138  00000000  00000000  00001119  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4b 01 	call	0x296	; 0x296 <main>
  8a:	0c 94 39 02 	jmp	0x472	; 0x472 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <key>:

return 0;
}

int key()
{
  92:	37 e0       	ldi	r19, 0x07	; 7
if ((PINA&0b00000001)==0){while((PINA&0b00000001)==0);return 7;}
if ((PINA&0b00000010)==0){while((PINA&0b00000010)==0);return 4;}
if ((PINA&0b00000100)==0){while((PINA&0b00000100)==0);return 1;}
if ((PINA&0b00001000)==0){while((PINA&0b00001000)==0);return 11;}
}
PORTB=0b00001011;
  94:	2b e0       	ldi	r18, 0x0B	; 11
if ((PINA&0b00000001)==0){while((PINA&0b00000001)==0);return 8;}
if ((PINA&0b00000010)==0){while((PINA&0b00000010)==0);return 5;}
if ((PINA&0b00000100)==0){while((PINA&0b00000100)==0);return 2;}
if ((PINA&0b00001000)==0){while((PINA&0b00001000)==0);return 0;}
}
PORTB=0b00001101;
  96:	9d e0       	ldi	r25, 0x0D	; 13
if ((PINA&0b00000001)==0){while((PINA&0b00000001)==0);return 9;}
if ((PINA&0b00000010)==0){while((PINA&0b00000010)==0);return 6;}
if ((PINA&0b00000100)==0){while((PINA&0b00000100)==0);return 3;}
if ((PINA&0b00001000)==0){while((PINA&0b00001000)==0);return 12;}
}
PORTB=0b00001110;
  98:	8e e0       	ldi	r24, 0x0E	; 14

int key()
{
while(1)
{
PORTB=0b00000111;
  9a:	38 bb       	out	0x18, r19	; 24
{
if ((PINA&0b00000001)==0){while((PINA&0b00000001)==0);return 7;}
  9c:	c8 99       	sbic	0x19, 0	; 25
  9e:	05 c0       	rjmp	.+10     	; 0xaa <key+0x18>
  a0:	c8 9b       	sbis	0x19, 0	; 25
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <key+0xe>
  a4:	27 e0       	ldi	r18, 0x07	; 7
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	6b c0       	rjmp	.+214    	; 0x180 <key+0xee>
if ((PINA&0b00000010)==0){while((PINA&0b00000010)==0);return 4;}
  aa:	c9 99       	sbic	0x19, 1	; 25
  ac:	05 c0       	rjmp	.+10     	; 0xb8 <key+0x26>
  ae:	c9 9b       	sbis	0x19, 1	; 25
  b0:	fe cf       	rjmp	.-4      	; 0xae <key+0x1c>
  b2:	24 e0       	ldi	r18, 0x04	; 4
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	64 c0       	rjmp	.+200    	; 0x180 <key+0xee>
if ((PINA&0b00000100)==0){while((PINA&0b00000100)==0);return 1;}
  b8:	ca 99       	sbic	0x19, 2	; 25
  ba:	05 c0       	rjmp	.+10     	; 0xc6 <key+0x34>
  bc:	ca 9b       	sbis	0x19, 2	; 25
  be:	fe cf       	rjmp	.-4      	; 0xbc <key+0x2a>
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	5d c0       	rjmp	.+186    	; 0x180 <key+0xee>
if ((PINA&0b00001000)==0){while((PINA&0b00001000)==0);return 11;}
  c6:	cb 99       	sbic	0x19, 3	; 25
  c8:	05 c0       	rjmp	.+10     	; 0xd4 <key+0x42>
  ca:	cb 9b       	sbis	0x19, 3	; 25
  cc:	fe cf       	rjmp	.-4      	; 0xca <key+0x38>
  ce:	2b e0       	ldi	r18, 0x0B	; 11
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	56 c0       	rjmp	.+172    	; 0x180 <key+0xee>
}
PORTB=0b00001011;
  d4:	28 bb       	out	0x18, r18	; 24
{
if ((PINA&0b00000001)==0){while((PINA&0b00000001)==0);return 8;}
  d6:	c8 99       	sbic	0x19, 0	; 25
  d8:	05 c0       	rjmp	.+10     	; 0xe4 <key+0x52>
  da:	c8 9b       	sbis	0x19, 0	; 25
  dc:	fe cf       	rjmp	.-4      	; 0xda <key+0x48>
  de:	28 e0       	ldi	r18, 0x08	; 8
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	4e c0       	rjmp	.+156    	; 0x180 <key+0xee>
if ((PINA&0b00000010)==0){while((PINA&0b00000010)==0);return 5;}
  e4:	c9 99       	sbic	0x19, 1	; 25
  e6:	05 c0       	rjmp	.+10     	; 0xf2 <key+0x60>
  e8:	c9 9b       	sbis	0x19, 1	; 25
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <key+0x56>
  ec:	25 e0       	ldi	r18, 0x05	; 5
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	47 c0       	rjmp	.+142    	; 0x180 <key+0xee>
if ((PINA&0b00000100)==0){while((PINA&0b00000100)==0);return 2;}
  f2:	ca 99       	sbic	0x19, 2	; 25
  f4:	05 c0       	rjmp	.+10     	; 0x100 <key+0x6e>
  f6:	ca 9b       	sbis	0x19, 2	; 25
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <key+0x64>
  fa:	22 e0       	ldi	r18, 0x02	; 2
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	40 c0       	rjmp	.+128    	; 0x180 <key+0xee>
if ((PINA&0b00001000)==0){while((PINA&0b00001000)==0);return 0;}
 100:	cb 99       	sbic	0x19, 3	; 25
 102:	05 c0       	rjmp	.+10     	; 0x10e <key+0x7c>
 104:	cb 9b       	sbis	0x19, 3	; 25
 106:	fe cf       	rjmp	.-4      	; 0x104 <key+0x72>
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	39 c0       	rjmp	.+114    	; 0x180 <key+0xee>
}
PORTB=0b00001101;
 10e:	98 bb       	out	0x18, r25	; 24
{
if ((PINA&0b00000001)==0){while((PINA&0b00000001)==0);return 9;}
 110:	c8 99       	sbic	0x19, 0	; 25
 112:	05 c0       	rjmp	.+10     	; 0x11e <key+0x8c>
 114:	c8 9b       	sbis	0x19, 0	; 25
 116:	fe cf       	rjmp	.-4      	; 0x114 <key+0x82>
 118:	29 e0       	ldi	r18, 0x09	; 9
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	31 c0       	rjmp	.+98     	; 0x180 <key+0xee>
if ((PINA&0b00000010)==0){while((PINA&0b00000010)==0);return 6;}
 11e:	c9 99       	sbic	0x19, 1	; 25
 120:	05 c0       	rjmp	.+10     	; 0x12c <key+0x9a>
 122:	c9 9b       	sbis	0x19, 1	; 25
 124:	fe cf       	rjmp	.-4      	; 0x122 <key+0x90>
 126:	26 e0       	ldi	r18, 0x06	; 6
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	2a c0       	rjmp	.+84     	; 0x180 <key+0xee>
if ((PINA&0b00000100)==0){while((PINA&0b00000100)==0);return 3;}
 12c:	ca 99       	sbic	0x19, 2	; 25
 12e:	05 c0       	rjmp	.+10     	; 0x13a <key+0xa8>
 130:	ca 9b       	sbis	0x19, 2	; 25
 132:	fe cf       	rjmp	.-4      	; 0x130 <key+0x9e>
 134:	23 e0       	ldi	r18, 0x03	; 3
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	23 c0       	rjmp	.+70     	; 0x180 <key+0xee>
if ((PINA&0b00001000)==0){while((PINA&0b00001000)==0);return 12;}
 13a:	cb 99       	sbic	0x19, 3	; 25
 13c:	05 c0       	rjmp	.+10     	; 0x148 <key+0xb6>
 13e:	cb 9b       	sbis	0x19, 3	; 25
 140:	fe cf       	rjmp	.-4      	; 0x13e <key+0xac>
 142:	2c e0       	ldi	r18, 0x0C	; 12
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	1c c0       	rjmp	.+56     	; 0x180 <key+0xee>
}
PORTB=0b00001110;
 148:	88 bb       	out	0x18, r24	; 24
{
if ((PINA&0b00000001)==0){while((PINA&0b00000001)==0);return 13;}
 14a:	c8 99       	sbic	0x19, 0	; 25
 14c:	05 c0       	rjmp	.+10     	; 0x158 <key+0xc6>
 14e:	c8 9b       	sbis	0x19, 0	; 25
 150:	fe cf       	rjmp	.-4      	; 0x14e <key+0xbc>
 152:	2d e0       	ldi	r18, 0x0D	; 13
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	14 c0       	rjmp	.+40     	; 0x180 <key+0xee>
if ((PINA&0b00000010)==0){while((PINA&0b00000010)==0);return 14;}
 158:	c9 99       	sbic	0x19, 1	; 25
 15a:	05 c0       	rjmp	.+10     	; 0x166 <key+0xd4>
 15c:	c9 9b       	sbis	0x19, 1	; 25
 15e:	fe cf       	rjmp	.-4      	; 0x15c <key+0xca>
 160:	2e e0       	ldi	r18, 0x0E	; 14
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	0d c0       	rjmp	.+26     	; 0x180 <key+0xee>
if ((PINA&0b00000100)==0){while((PINA&0b00000100)==0);return 15;}
 166:	ca 99       	sbic	0x19, 2	; 25
 168:	05 c0       	rjmp	.+10     	; 0x174 <key+0xe2>
 16a:	ca 9b       	sbis	0x19, 2	; 25
 16c:	fe cf       	rjmp	.-4      	; 0x16a <key+0xd8>
 16e:	2f e0       	ldi	r18, 0x0F	; 15
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	06 c0       	rjmp	.+12     	; 0x180 <key+0xee>
if ((PINA&0b00001000)==0){while((PINA&0b00001000)==0);return 16;}
 174:	cb 99       	sbic	0x19, 3	; 25
 176:	91 cf       	rjmp	.-222    	; 0x9a <key+0x8>
 178:	cb 9b       	sbis	0x19, 3	; 25
 17a:	fe cf       	rjmp	.-4      	; 0x178 <key+0xe6>
 17c:	20 e1       	ldi	r18, 0x10	; 16
 17e:	30 e0       	ldi	r19, 0x00	; 0
}

}}
 180:	c9 01       	movw	r24, r18
 182:	08 95       	ret

00000184 <lcd_cmd>:
dis_cmd(0x0C);
dis_cmd(0x06);
}

void lcd_cmd(int x)
{
 184:	82 bb       	out	0x12, r24	; 18
PORTD=x;
PORTD&=~(1<<rs);
 186:	90 98       	cbi	0x12, 0	; 18
PORTD&=~(1<<rw);
 188:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
 18a:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 18c:	8a ef       	ldi	r24, 0xFA	; 250
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_cmd+0xc>
_delay_ms(1);
PORTD&=~(1<<en);
 194:	92 98       	cbi	0x12, 2	; 18
}
 196:	08 95       	ret

00000198 <dis_cmd>:

void dis_cmd(int x)
{
 198:	9c 01       	movw	r18, r24
 19a:	20 7f       	andi	r18, 0xF0	; 240
 19c:	30 70       	andi	r19, 0x00	; 0
 19e:	22 bb       	out	0x12, r18	; 18
}

void lcd_cmd(int x)
{
PORTD=x;
PORTD&=~(1<<rs);
 1a0:	90 98       	cbi	0x12, 0	; 18
PORTD&=~(1<<rw);
 1a2:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
 1a4:	92 9a       	sbi	0x12, 2	; 18
 1a6:	2a ef       	ldi	r18, 0xFA	; 250
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	f9 01       	movw	r30, r18
 1ac:	31 97       	sbiw	r30, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <dis_cmd+0x14>
_delay_ms(1);
PORTD&=~(1<<en);
 1b0:	92 98       	cbi	0x12, 2	; 18
dis_cmd(0x06);
}

void lcd_cmd(int x)
{
PORTD=x;
 1b2:	44 e0       	ldi	r20, 0x04	; 4
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	4a 95       	dec	r20
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <dis_cmd+0x1c>
 1bc:	90 70       	andi	r25, 0x00	; 0
 1be:	82 bb       	out	0x12, r24	; 18
PORTD&=~(1<<rs);
 1c0:	90 98       	cbi	0x12, 0	; 18
PORTD&=~(1<<rw);
 1c2:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
 1c4:	92 9a       	sbi	0x12, 2	; 18
 1c6:	c9 01       	movw	r24, r18
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <dis_cmd+0x30>
_delay_ms(1);
PORTD&=~(1<<en);
 1cc:	92 98       	cbi	0x12, 2	; 18
int x1;
x1=x&0xf0;
lcd_cmd(x1);
x1=(x<<4)&0xf0;
lcd_cmd(x1);
}
 1ce:	08 95       	ret

000001d0 <lcd_init>:
 dis_cmd(0x06);
}


void lcd_init()
{
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 cc 00 	call	0x198	; 0x198 <dis_cmd>
dis_cmd(0x02);
dis_cmd(0x28);
 1d8:	88 e2       	ldi	r24, 0x28	; 40
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 cc 00 	call	0x198	; 0x198 <dis_cmd>
dis_cmd(0x0C);
 1e0:	8c e0       	ldi	r24, 0x0C	; 12
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 cc 00 	call	0x198	; 0x198 <dis_cmd>
dis_cmd(0x06);
 1e8:	86 e0       	ldi	r24, 0x06	; 6
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 cc 00 	call	0x198	; 0x198 <dis_cmd>
}
 1f0:	08 95       	ret

000001f2 <lcd_data>:
x1=(x<<4)&0xf0;
lcd_cmd(x1);
}

void lcd_data(int x)
{
 1f2:	82 bb       	out	0x12, r24	; 18
PORTD=x;
PORTD|=(1<<rs);
 1f4:	90 9a       	sbi	0x12, 0	; 18
PORTD&=~(1<<rw);
 1f6:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
 1f8:	92 9a       	sbi	0x12, 2	; 18
 1fa:	8a ef       	ldi	r24, 0xFA	; 250
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_data+0xc>
_delay_ms(1);
PORTD&=~(1<<en);
 202:	92 98       	cbi	0x12, 2	; 18
}
 204:	08 95       	ret

00000206 <dis_data>:

void dis_data(int x)
{
 206:	9c 01       	movw	r18, r24
 208:	20 7f       	andi	r18, 0xF0	; 240
 20a:	30 70       	andi	r19, 0x00	; 0
 20c:	22 bb       	out	0x12, r18	; 18
}

void lcd_data(int x)
{
PORTD=x;
PORTD|=(1<<rs);
 20e:	90 9a       	sbi	0x12, 0	; 18
PORTD&=~(1<<rw);
 210:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
 212:	92 9a       	sbi	0x12, 2	; 18
 214:	2a ef       	ldi	r18, 0xFA	; 250
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	f9 01       	movw	r30, r18
 21a:	31 97       	sbiw	r30, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <dis_data+0x14>
_delay_ms(1);
PORTD&=~(1<<en);
 21e:	92 98       	cbi	0x12, 2	; 18
lcd_cmd(x1);
}

void lcd_data(int x)
{
PORTD=x;
 220:	54 e0       	ldi	r21, 0x04	; 4
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	5a 95       	dec	r21
 228:	e1 f7       	brne	.-8      	; 0x222 <dis_data+0x1c>
 22a:	90 70       	andi	r25, 0x00	; 0
 22c:	82 bb       	out	0x12, r24	; 18
PORTD|=(1<<rs);
 22e:	90 9a       	sbi	0x12, 0	; 18
PORTD&=~(1<<rw);
 230:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
 232:	92 9a       	sbi	0x12, 2	; 18
 234:	c9 01       	movw	r24, r18
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <dis_data+0x30>
_delay_ms(1);
PORTD&=~(1<<en);
 23a:	92 98       	cbi	0x12, 2	; 18
int x1;
x1=x&0xf0;
lcd_data(x1);
x1=(x<<4)&0xf0;
lcd_data(x1);
}
 23c:	08 95       	ret

0000023e <lcd_number>:
  dis_data(str[i]);
  }
}

void lcd_number(int abc)
{
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	ec 01       	movw	r28, r24
 dis_cmd(0x04);
 244:	84 e0       	ldi	r24, 0x04	; 4
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 cc 00 	call	0x198	; 0x198 <dis_cmd>
 24c:	0e c0       	rjmp	.+28     	; 0x26a <lcd_number+0x2c>
 unsigned int d=0;
 while (abc!=0)
  {
   d=abc%10;
   dis_data(d+48);
 24e:	ce 01       	movw	r24, r28
 250:	6a e0       	ldi	r22, 0x0A	; 10
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	0e 94 12 02 	call	0x424	; 0x424 <__divmodhi4>
 258:	c0 96       	adiw	r24, 0x30	; 48
 25a:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
   abc=abc/10;
 25e:	ce 01       	movw	r24, r28
 260:	6a e0       	ldi	r22, 0x0A	; 10
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	0e 94 12 02 	call	0x424	; 0x424 <__divmodhi4>
 268:	eb 01       	movw	r28, r22

void lcd_number(int abc)
{
 dis_cmd(0x04);
 unsigned int d=0;
 while (abc!=0)
 26a:	20 97       	sbiw	r28, 0x00	; 0
 26c:	81 f7       	brne	.-32     	; 0x24e <lcd_number+0x10>
   dis_data(d+48);
   abc=abc/10;
   }
   
    
 dis_cmd(0x06);
 26e:	86 e0       	ldi	r24, 0x06	; 6
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 cc 00 	call	0x198	; 0x198 <dis_cmd>
}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <lcd_string>:

}}


void lcd_string(char *str)
{
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	ec 01       	movw	r28, r24
 282:	03 c0       	rjmp	.+6      	; 0x28a <lcd_string+0xe>

  for(int i=0;str[i]!='\0';i++)
  {
  dis_data(str[i]);
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>


void lcd_string(char *str)
{

  for(int i=0;str[i]!='\0';i++)
 28a:	89 91       	ld	r24, Y+
 28c:	88 23       	and	r24, r24
 28e:	d1 f7       	brne	.-12     	; 0x284 <lcd_string+0x8>
  {
  dis_data(str[i]);
  }
}
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <main>:

int key();


int main()
{
 296:	1f 93       	push	r17
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29

DDRA=0x00;
 29c:	1a ba       	out	0x1a, r1	; 26
DDRD=0xff;
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	81 bb       	out	0x11, r24	; 17
DDRB=0x0f;
 2a2:	1f e0       	ldi	r17, 0x0F	; 15
 2a4:	17 bb       	out	0x17, r17	; 23
lcd_init();
 2a6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <lcd_init>

PORTA=0x0f;
 2aa:	1b bb       	out	0x1b, r17	; 27
while(1)
{
int y=key();
 2ac:	0e 94 49 00 	call	0x92	; 0x92 <key>
 2b0:	ec 01       	movw	r28, r24
if(y==7) {dis_data(0x80); dis_data('7');}
 2b2:	87 30       	cpi	r24, 0x07	; 7
 2b4:	91 05       	cpc	r25, r1
 2b6:	49 f4       	brne	.+18     	; 0x2ca <main+0x34>
 2b8:	80 e8       	ldi	r24, 0x80	; 128
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 2c0:	87 e3       	ldi	r24, 0x37	; 55
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 2c8:	24 c0       	rjmp	.+72     	; 0x312 <main+0x7c>
if(y==4) {dis_data(0x80); dis_data('4');}
 2ca:	84 30       	cpi	r24, 0x04	; 4
 2cc:	91 05       	cpc	r25, r1
 2ce:	49 f4       	brne	.+18     	; 0x2e2 <main+0x4c>
 2d0:	80 e8       	ldi	r24, 0x80	; 128
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 2d8:	84 e3       	ldi	r24, 0x34	; 52
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 2e0:	24 c0       	rjmp	.+72     	; 0x32a <main+0x94>
if(y==1) {dis_data(0x80); dis_data('1');}
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	91 05       	cpc	r25, r1
 2e6:	49 f4       	brne	.+18     	; 0x2fa <main+0x64>
 2e8:	80 e8       	ldi	r24, 0x80	; 128
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 2f0:	81 e3       	ldi	r24, 0x31	; 49
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 2f8:	24 c0       	rjmp	.+72     	; 0x342 <main+0xac>
if(y==11) {dis_data(0x80); dis_cmd(0x01);}
 2fa:	8b 30       	cpi	r24, 0x0B	; 11
 2fc:	91 05       	cpc	r25, r1
 2fe:	49 f4       	brne	.+18     	; 0x312 <main+0x7c>
 300:	80 e8       	ldi	r24, 0x80	; 128
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 cc 00 	call	0x198	; 0x198 <dis_cmd>
 310:	2f c0       	rjmp	.+94     	; 0x370 <main+0xda>

if(y==8) {dis_data(0x80); dis_data('8');}
 312:	c8 30       	cpi	r28, 0x08	; 8
 314:	d1 05       	cpc	r29, r1
 316:	49 f4       	brne	.+18     	; 0x32a <main+0x94>
 318:	80 e8       	ldi	r24, 0x80	; 128
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 320:	88 e3       	ldi	r24, 0x38	; 56
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 328:	23 c0       	rjmp	.+70     	; 0x370 <main+0xda>
if(y==5) {dis_data(0x80); dis_data('5');}
 32a:	c5 30       	cpi	r28, 0x05	; 5
 32c:	d1 05       	cpc	r29, r1
 32e:	49 f4       	brne	.+18     	; 0x342 <main+0xac>
 330:	80 e8       	ldi	r24, 0x80	; 128
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 338:	85 e3       	ldi	r24, 0x35	; 53
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 340:	23 c0       	rjmp	.+70     	; 0x388 <main+0xf2>
if(y==2) {dis_data(0x80); dis_data('2');}
 342:	c2 30       	cpi	r28, 0x02	; 2
 344:	d1 05       	cpc	r29, r1
 346:	49 f4       	brne	.+18     	; 0x35a <main+0xc4>
 348:	80 e8       	ldi	r24, 0x80	; 128
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 350:	82 e3       	ldi	r24, 0x32	; 50
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 358:	23 c0       	rjmp	.+70     	; 0x3a0 <main+0x10a>
if(y==0) {dis_data(0x80); dis_data('0');}
 35a:	20 97       	sbiw	r28, 0x00	; 0
 35c:	49 f4       	brne	.+18     	; 0x370 <main+0xda>
 35e:	80 e8       	ldi	r24, 0x80	; 128
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 366:	80 e3       	ldi	r24, 0x30	; 48
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 36e:	24 c0       	rjmp	.+72     	; 0x3b8 <main+0x122>

if(y==9) {dis_data(0x80); dis_data('9');}
 370:	c9 30       	cpi	r28, 0x09	; 9
 372:	d1 05       	cpc	r29, r1
 374:	49 f4       	brne	.+18     	; 0x388 <main+0xf2>
 376:	80 e8       	ldi	r24, 0x80	; 128
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 37e:	89 e3       	ldi	r24, 0x39	; 57
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 386:	24 c0       	rjmp	.+72     	; 0x3d0 <main+0x13a>
if(y==6) {dis_data(0x80); dis_data('6');}
 388:	c6 30       	cpi	r28, 0x06	; 6
 38a:	d1 05       	cpc	r29, r1
 38c:	49 f4       	brne	.+18     	; 0x3a0 <main+0x10a>
 38e:	80 e8       	ldi	r24, 0x80	; 128
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 396:	86 e3       	ldi	r24, 0x36	; 54
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 39e:	22 c0       	rjmp	.+68     	; 0x3e4 <main+0x14e>
if(y==3) {dis_data(0x80); dis_data('3');}
 3a0:	c3 30       	cpi	r28, 0x03	; 3
 3a2:	d1 05       	cpc	r29, r1
 3a4:	49 f4       	brne	.+18     	; 0x3b8 <main+0x122>
 3a6:	80 e8       	ldi	r24, 0x80	; 128
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 3ae:	83 e3       	ldi	r24, 0x33	; 51
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 3b6:	20 c0       	rjmp	.+64     	; 0x3f8 <main+0x162>
if(y==12) {dis_data(0x80); dis_data('=');}
 3b8:	cc 30       	cpi	r28, 0x0C	; 12
 3ba:	d1 05       	cpc	r29, r1
 3bc:	49 f4       	brne	.+18     	; 0x3d0 <main+0x13a>
 3be:	80 e8       	ldi	r24, 0x80	; 128
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 3c6:	8d e3       	ldi	r24, 0x3D	; 61
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 3ce:	1e c0       	rjmp	.+60     	; 0x40c <main+0x176>

if(y==13) {dis_data(0x80); dis_data('/');}
 3d0:	cd 30       	cpi	r28, 0x0D	; 13
 3d2:	d1 05       	cpc	r29, r1
 3d4:	39 f4       	brne	.+14     	; 0x3e4 <main+0x14e>
 3d6:	80 e8       	ldi	r24, 0x80	; 128
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 3de:	8f e2       	ldi	r24, 0x2F	; 47
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	1d c0       	rjmp	.+58     	; 0x41e <main+0x188>
if(y==14) {dis_data(0x80); dis_data('x');}
 3e4:	ce 30       	cpi	r28, 0x0E	; 14
 3e6:	d1 05       	cpc	r29, r1
 3e8:	39 f4       	brne	.+14     	; 0x3f8 <main+0x162>
 3ea:	80 e8       	ldi	r24, 0x80	; 128
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 3f2:	88 e7       	ldi	r24, 0x78	; 120
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	13 c0       	rjmp	.+38     	; 0x41e <main+0x188>
if(y==15) {dis_data(0x80); dis_data('-');}
 3f8:	cf 30       	cpi	r28, 0x0F	; 15
 3fa:	d1 05       	cpc	r29, r1
 3fc:	39 f4       	brne	.+14     	; 0x40c <main+0x176>
 3fe:	80 e8       	ldi	r24, 0x80	; 128
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 406:	8d e2       	ldi	r24, 0x2D	; 45
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	09 c0       	rjmp	.+18     	; 0x41e <main+0x188>
if(y==16) {dis_data(0x80); dis_data('+');}
 40c:	60 97       	sbiw	r28, 0x10	; 16
 40e:	09 f0       	breq	.+2      	; 0x412 <main+0x17c>
 410:	4d cf       	rjmp	.-358    	; 0x2ac <main+0x16>
 412:	80 e8       	ldi	r24, 0x80	; 128
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 41a:	8b e2       	ldi	r24, 0x2B	; 43
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 03 01 	call	0x206	; 0x206 <dis_data>
 422:	44 cf       	rjmp	.-376    	; 0x2ac <main+0x16>

00000424 <__divmodhi4>:
 424:	97 fb       	bst	r25, 7
 426:	09 2e       	mov	r0, r25
 428:	07 26       	eor	r0, r23
 42a:	0a d0       	rcall	.+20     	; 0x440 <__divmodhi4_neg1>
 42c:	77 fd       	sbrc	r23, 7
 42e:	04 d0       	rcall	.+8      	; 0x438 <__divmodhi4_neg2>
 430:	0c d0       	rcall	.+24     	; 0x44a <__udivmodhi4>
 432:	06 d0       	rcall	.+12     	; 0x440 <__divmodhi4_neg1>
 434:	00 20       	and	r0, r0
 436:	1a f4       	brpl	.+6      	; 0x43e <__divmodhi4_exit>

00000438 <__divmodhi4_neg2>:
 438:	70 95       	com	r23
 43a:	61 95       	neg	r22
 43c:	7f 4f       	sbci	r23, 0xFF	; 255

0000043e <__divmodhi4_exit>:
 43e:	08 95       	ret

00000440 <__divmodhi4_neg1>:
 440:	f6 f7       	brtc	.-4      	; 0x43e <__divmodhi4_exit>
 442:	90 95       	com	r25
 444:	81 95       	neg	r24
 446:	9f 4f       	sbci	r25, 0xFF	; 255
 448:	08 95       	ret

0000044a <__udivmodhi4>:
 44a:	aa 1b       	sub	r26, r26
 44c:	bb 1b       	sub	r27, r27
 44e:	51 e1       	ldi	r21, 0x11	; 17
 450:	07 c0       	rjmp	.+14     	; 0x460 <__udivmodhi4_ep>

00000452 <__udivmodhi4_loop>:
 452:	aa 1f       	adc	r26, r26
 454:	bb 1f       	adc	r27, r27
 456:	a6 17       	cp	r26, r22
 458:	b7 07       	cpc	r27, r23
 45a:	10 f0       	brcs	.+4      	; 0x460 <__udivmodhi4_ep>
 45c:	a6 1b       	sub	r26, r22
 45e:	b7 0b       	sbc	r27, r23

00000460 <__udivmodhi4_ep>:
 460:	88 1f       	adc	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	5a 95       	dec	r21
 466:	a9 f7       	brne	.-22     	; 0x452 <__udivmodhi4_loop>
 468:	80 95       	com	r24
 46a:	90 95       	com	r25
 46c:	bc 01       	movw	r22, r24
 46e:	cd 01       	movw	r24, r26
 470:	08 95       	ret

00000472 <_exit>:
 472:	f8 94       	cli

00000474 <__stop_program>:
 474:	ff cf       	rjmp	.-2      	; 0x474 <__stop_program>
