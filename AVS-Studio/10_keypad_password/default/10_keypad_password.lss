
10_keypad_password.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000003c2  00000436  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000476  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000080  00000000  00000000  00000496  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000421  00000000  00000000  00000516  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000175  00000000  00000000  00000937  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000455  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000f04  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000011a  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000230  00000000  00000000  000010be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000c0  00000000  00000000  000012ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 33 01 	call	0x266	; 0x266 <main>
  7a:	0c 94 df 01 	jmp	0x3be	; 0x3be <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <key>:

int key()
{//_delay_ms(50);
//while(1)
{
PORTB=0b00000111;
  82:	87 e0       	ldi	r24, 0x07	; 7
  84:	88 bb       	out	0x18, r24	; 24
{
if ((PINA&0b00000001)==0){while((PINA&0b00000001)==0);return 7;}//(r1,c1)
  86:	c8 99       	sbic	0x19, 0	; 25
  88:	03 c0       	rjmp	.+6      	; 0x90 <key+0xe>
  8a:	c8 9b       	sbis	0x19, 0	; 25
  8c:	fe cf       	rjmp	.-4      	; 0x8a <key+0x8>
  8e:	70 c0       	rjmp	.+224    	; 0x170 <key+0xee>
if ((PINA&0b00000010)==0){while((PINA&0b00000010)==0);return 4;}//(r1,c2)
  90:	c9 99       	sbic	0x19, 1	; 25
  92:	05 c0       	rjmp	.+10     	; 0x9e <key+0x1c>
  94:	c9 9b       	sbis	0x19, 1	; 25
  96:	fe cf       	rjmp	.-4      	; 0x94 <key+0x12>
  98:	24 e0       	ldi	r18, 0x04	; 4
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	6b c0       	rjmp	.+214    	; 0x174 <key+0xf2>
if ((PINA&0b00000100)==0){while((PINA&0b00000100)==0);return 1;}//(r1,c3)
  9e:	ca 99       	sbic	0x19, 2	; 25
  a0:	05 c0       	rjmp	.+10     	; 0xac <key+0x2a>
  a2:	ca 9b       	sbis	0x19, 2	; 25
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <key+0x20>
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	64 c0       	rjmp	.+200    	; 0x174 <key+0xf2>
if ((PINA&0b00001000)==0){while((PINA&0b00001000)==0);return 11;}//(r1,c4)
  ac:	cb 99       	sbic	0x19, 3	; 25
  ae:	05 c0       	rjmp	.+10     	; 0xba <key+0x38>
  b0:	cb 9b       	sbis	0x19, 3	; 25
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <key+0x2e>
  b4:	2b e0       	ldi	r18, 0x0B	; 11
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	5d c0       	rjmp	.+186    	; 0x174 <key+0xf2>
}
PORTB=0b00001011;
  ba:	8b e0       	ldi	r24, 0x0B	; 11
  bc:	88 bb       	out	0x18, r24	; 24
{
if ((PINA&0b00000001)==0){while((PINA&0b00000001)==0);return 8;}//(r2,c1)
  be:	c8 99       	sbic	0x19, 0	; 25
  c0:	05 c0       	rjmp	.+10     	; 0xcc <key+0x4a>
  c2:	c8 9b       	sbis	0x19, 0	; 25
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <key+0x40>
  c6:	28 e0       	ldi	r18, 0x08	; 8
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	54 c0       	rjmp	.+168    	; 0x174 <key+0xf2>
if ((PINA&0b00000010)==0){while((PINA&0b00000010)==0);return 5;}//(r2,c2)
  cc:	c9 99       	sbic	0x19, 1	; 25
  ce:	05 c0       	rjmp	.+10     	; 0xda <key+0x58>
  d0:	c9 9b       	sbis	0x19, 1	; 25
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <key+0x4e>
  d4:	25 e0       	ldi	r18, 0x05	; 5
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	4d c0       	rjmp	.+154    	; 0x174 <key+0xf2>
if ((PINA&0b00000100)==0){while((PINA&0b00000100)==0);return 2;}//(r2,c3)
  da:	ca 99       	sbic	0x19, 2	; 25
  dc:	05 c0       	rjmp	.+10     	; 0xe8 <key+0x66>
  de:	ca 9b       	sbis	0x19, 2	; 25
  e0:	fe cf       	rjmp	.-4      	; 0xde <key+0x5c>
  e2:	22 e0       	ldi	r18, 0x02	; 2
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	46 c0       	rjmp	.+140    	; 0x174 <key+0xf2>
if ((PINA&0b00001000)==0){while((PINA&0b00001000)==0);return 0;}//(r2,c4)
  e8:	cb 99       	sbic	0x19, 3	; 25
  ea:	05 c0       	rjmp	.+10     	; 0xf6 <key+0x74>
  ec:	cb 9b       	sbis	0x19, 3	; 25
  ee:	fe cf       	rjmp	.-4      	; 0xec <key+0x6a>
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	3f c0       	rjmp	.+126    	; 0x174 <key+0xf2>
}
PORTB=0b00001101;
  f6:	8d e0       	ldi	r24, 0x0D	; 13
  f8:	88 bb       	out	0x18, r24	; 24
{
if ((PINA&0b00000001)==0){while((PINA&0b00000001)==0);return 9;}//(r3,c1)
  fa:	c8 99       	sbic	0x19, 0	; 25
  fc:	05 c0       	rjmp	.+10     	; 0x108 <key+0x86>
  fe:	c8 9b       	sbis	0x19, 0	; 25
 100:	fe cf       	rjmp	.-4      	; 0xfe <key+0x7c>
 102:	29 e0       	ldi	r18, 0x09	; 9
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	36 c0       	rjmp	.+108    	; 0x174 <key+0xf2>
if ((PINA&0b00000010)==0){while((PINA&0b00000010)==0);return 6;}//(r3,c2)
 108:	c9 99       	sbic	0x19, 1	; 25
 10a:	05 c0       	rjmp	.+10     	; 0x116 <key+0x94>
 10c:	c9 9b       	sbis	0x19, 1	; 25
 10e:	fe cf       	rjmp	.-4      	; 0x10c <key+0x8a>
 110:	26 e0       	ldi	r18, 0x06	; 6
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	2f c0       	rjmp	.+94     	; 0x174 <key+0xf2>
if ((PINA&0b00000100)==0){while((PINA&0b00000100)==0);return 3;}//(r3,c3)
 116:	ca 99       	sbic	0x19, 2	; 25
 118:	05 c0       	rjmp	.+10     	; 0x124 <key+0xa2>
 11a:	ca 9b       	sbis	0x19, 2	; 25
 11c:	fe cf       	rjmp	.-4      	; 0x11a <key+0x98>
 11e:	23 e0       	ldi	r18, 0x03	; 3
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	28 c0       	rjmp	.+80     	; 0x174 <key+0xf2>
if ((PINA&0b00001000)==0){while((PINA&0b00001000)==0);return 12;}//(r3,c4) for Enter
 124:	cb 99       	sbic	0x19, 3	; 25
 126:	05 c0       	rjmp	.+10     	; 0x132 <key+0xb0>
 128:	cb 9b       	sbis	0x19, 3	; 25
 12a:	fe cf       	rjmp	.-4      	; 0x128 <key+0xa6>
 12c:	2c e0       	ldi	r18, 0x0C	; 12
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	21 c0       	rjmp	.+66     	; 0x174 <key+0xf2>
}
PORTB=0b00001110;
 132:	8e e0       	ldi	r24, 0x0E	; 14
 134:	88 bb       	out	0x18, r24	; 24
{
if ((PINA&0b00000001)==0){while((PINA&0b00000001)==0);return 13;}//(r4,c1)
 136:	c8 99       	sbic	0x19, 0	; 25
 138:	05 c0       	rjmp	.+10     	; 0x144 <key+0xc2>
 13a:	c8 9b       	sbis	0x19, 0	; 25
 13c:	fe cf       	rjmp	.-4      	; 0x13a <key+0xb8>
 13e:	2d e0       	ldi	r18, 0x0D	; 13
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	18 c0       	rjmp	.+48     	; 0x174 <key+0xf2>
if ((PINA&0b00000010)==0){while((PINA&0b00000010)==0);return 14;}//(r4,c2)
 144:	c9 99       	sbic	0x19, 1	; 25
 146:	05 c0       	rjmp	.+10     	; 0x152 <key+0xd0>
 148:	c9 9b       	sbis	0x19, 1	; 25
 14a:	fe cf       	rjmp	.-4      	; 0x148 <key+0xc6>
 14c:	2e e0       	ldi	r18, 0x0E	; 14
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	11 c0       	rjmp	.+34     	; 0x174 <key+0xf2>
if ((PINA&0b00000100)==0){while((PINA&0b00000100)==0);return 15;}//(r4,c3)
 152:	ca 99       	sbic	0x19, 2	; 25
 154:	05 c0       	rjmp	.+10     	; 0x160 <key+0xde>
 156:	ca 9b       	sbis	0x19, 2	; 25
 158:	fe cf       	rjmp	.-4      	; 0x156 <key+0xd4>
 15a:	2f e0       	ldi	r18, 0x0F	; 15
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	0a c0       	rjmp	.+20     	; 0x174 <key+0xf2>
if ((PINA&0b00001000)==0){while((PINA&0b00001000)==0);return 16;}//(r4,c4)
 160:	cb 99       	sbic	0x19, 3	; 25
 162:	05 c0       	rjmp	.+10     	; 0x16e <key+0xec>
 164:	cb 9b       	sbis	0x19, 3	; 25
 166:	fe cf       	rjmp	.-4      	; 0x164 <key+0xe2>
 168:	20 e1       	ldi	r18, 0x10	; 16
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	03 c0       	rjmp	.+6      	; 0x174 <key+0xf2>
 16e:	08 95       	ret
}

}}
 170:	27 e0       	ldi	r18, 0x07	; 7
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	c9 01       	movw	r24, r18
 176:	08 95       	ret

00000178 <lcd_cmd>:
dis_cmd(0x06);
}

void lcd_cmd(int x)
{
PORTD=x;
 178:	82 bb       	out	0x12, r24	; 18
PORTD&=~(1<<rs);
 17a:	90 98       	cbi	0x12, 0	; 18
PORTD&=~(1<<rw);
 17c:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
 17e:	92 9a       	sbi	0x12, 2	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 180:	8a ef       	ldi	r24, 0xFA	; 250
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <lcd_cmd+0xc>
_delay_ms(1);
PORTD&=~(1<<en);
 188:	92 98       	cbi	0x12, 2	; 18
}
 18a:	08 95       	ret

0000018c <dis_cmd>:

void dis_cmd(int x)
{
 18c:	0f 93       	push	r16
 18e:	1f 93       	push	r17
 190:	8c 01       	movw	r16, r24
int x1;
x1=x&0xf0;
lcd_cmd(x1);
 192:	80 7f       	andi	r24, 0xF0	; 240
 194:	90 70       	andi	r25, 0x00	; 0
 196:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_cmd>
x1=(x<<4)&0xf0;
lcd_cmd(x1);
 19a:	84 e0       	ldi	r24, 0x04	; 4
 19c:	00 0f       	add	r16, r16
 19e:	11 1f       	adc	r17, r17
 1a0:	8a 95       	dec	r24
 1a2:	e1 f7       	brne	.-8      	; 0x19c <dis_cmd+0x10>
 1a4:	c8 01       	movw	r24, r16
 1a6:	90 70       	andi	r25, 0x00	; 0
 1a8:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_cmd>
}
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	08 95       	ret

000001b2 <lcd_init>:
}


void lcd_init()
{
dis_cmd(0x02);
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 c6 00 	call	0x18c	; 0x18c <dis_cmd>
dis_cmd(0x28);
 1ba:	88 e2       	ldi	r24, 0x28	; 40
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 c6 00 	call	0x18c	; 0x18c <dis_cmd>
dis_cmd(0x0C);
 1c2:	8c e0       	ldi	r24, 0x0C	; 12
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 c6 00 	call	0x18c	; 0x18c <dis_cmd>
dis_cmd(0x06);
 1ca:	86 e0       	ldi	r24, 0x06	; 6
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 c6 00 	call	0x18c	; 0x18c <dis_cmd>
}
 1d2:	08 95       	ret

000001d4 <lcd_data>:
lcd_cmd(x1);
}

void lcd_data(int x)
{
PORTD=x;
 1d4:	82 bb       	out	0x12, r24	; 18
PORTD|=(1<<rs);
 1d6:	90 9a       	sbi	0x12, 0	; 18
PORTD&=~(1<<rw);
 1d8:	91 98       	cbi	0x12, 1	; 18
PORTD|=(1<<en);
 1da:	92 9a       	sbi	0x12, 2	; 18
 1dc:	8a ef       	ldi	r24, 0xFA	; 250
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_data+0xc>
_delay_ms(1);
PORTD&=~(1<<en);
 1e4:	92 98       	cbi	0x12, 2	; 18
}
 1e6:	08 95       	ret

000001e8 <dis_data>:

void dis_data(int x)
{
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	8c 01       	movw	r16, r24
int x1;
x1=x&0xf0;
lcd_data(x1);
 1ee:	80 7f       	andi	r24, 0xF0	; 240
 1f0:	90 70       	andi	r25, 0x00	; 0
 1f2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_data>
x1=(x<<4)&0xf0;
lcd_data(x1);
 1f6:	94 e0       	ldi	r25, 0x04	; 4
 1f8:	00 0f       	add	r16, r16
 1fa:	11 1f       	adc	r17, r17
 1fc:	9a 95       	dec	r25
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <dis_data+0x10>
 200:	c8 01       	movw	r24, r16
 202:	90 70       	andi	r25, 0x00	; 0
 204:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_data>
}
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	08 95       	ret

0000020e <lcd_number>:
  dis_data(str[i]);
  }
}

void lcd_number(int abc)
{
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	ec 01       	movw	r28, r24
 dis_cmd(0x04);
 214:	84 e0       	ldi	r24, 0x04	; 4
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 c6 00 	call	0x18c	; 0x18c <dis_cmd>
 21c:	0e c0       	rjmp	.+28     	; 0x23a <lcd_number+0x2c>
 unsigned int d=0;
 while (abc!=0)
  {
   d=abc%10;
   dis_data(d+48);
 21e:	ce 01       	movw	r24, r28
 220:	6a e0       	ldi	r22, 0x0A	; 10
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	0e 94 b8 01 	call	0x370	; 0x370 <__divmodhi4>
 228:	c0 96       	adiw	r24, 0x30	; 48
 22a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <dis_data>
   abc=abc/10;
 22e:	ce 01       	movw	r24, r28
 230:	6a e0       	ldi	r22, 0x0A	; 10
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	0e 94 b8 01 	call	0x370	; 0x370 <__divmodhi4>
 238:	eb 01       	movw	r28, r22

void lcd_number(int abc)
{
 dis_cmd(0x04);
 unsigned int d=0;
 while (abc!=0)
 23a:	20 97       	sbiw	r28, 0x00	; 0
 23c:	81 f7       	brne	.-32     	; 0x21e <lcd_number+0x10>
   dis_data(d+48);
   abc=abc/10;
   }
   
    
 dis_cmd(0x06);
 23e:	86 e0       	ldi	r24, 0x06	; 6
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 c6 00 	call	0x18c	; 0x18c <dis_cmd>
}
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <lcd_string>:

}}


void lcd_string(char *str)
{
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	ec 01       	movw	r28, r24
 252:	03 c0       	rjmp	.+6      	; 0x25a <lcd_string+0xe>

  for(int i=0;str[i]!='\0';i++)
  {
  dis_data(str[i]);
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <dis_data>


void lcd_string(char *str)
{

  for(int i=0;str[i]!='\0';i++)
 25a:	89 91       	ld	r24, Y+
 25c:	88 23       	and	r24, r24
 25e:	d1 f7       	brne	.-12     	; 0x254 <lcd_string+0x8>
  {
  dis_data(str[i]);
  }
}
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <main>:

int key();


int main()
{
 266:	ef 92       	push	r14
 268:	ff 92       	push	r15
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29

DDRA=0x00;  //input (PA3-0 = Coulmn)
 272:	1a ba       	out	0x1a, r1	; 26
DDRB=0x0f;  //ground (PB3-0 = Row)
 274:	1f e0       	ldi	r17, 0x0F	; 15
 276:	17 bb       	out	0x17, r17	; 23

DDRD=0xff;
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	81 bb       	out	0x11, r24	; 17
lcd_init();
 27c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <lcd_init>

PORTA=0x0f;  //pull up on
 280:	1b bb       	out	0x1b, r17	; 27


while(1)
{
unsigned int sum1=3654,sum=0,y=0;
dis_cmd(0x80);
 282:	80 e8       	ldi	r24, 0x80	; 128
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 c6 00 	call	0x18c	; 0x18c <dis_cmd>
lcd_string("Password Control");
 28a:	80 e6       	ldi	r24, 0x60	; 96
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_string>
 292:	80 e1       	ldi	r24, 0x10	; 16
 294:	97 e2       	ldi	r25, 0x27	; 39
 296:	29 e1       	ldi	r18, 0x19	; 25
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	f9 01       	movw	r30, r18
 29c:	31 97       	sbiw	r30, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <main+0x36>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2a2:	d9 f7       	brne	.-10     	; 0x29a <main+0x34>
 2a4:	c0 e0       	ldi	r28, 0x00	; 0
 2a6:	d0 e0       	ldi	r29, 0x00	; 0
 2a8:	04 ec       	ldi	r16, 0xC4	; 196
 2aa:	19 e0       	ldi	r17, 0x09	; 9
 2ac:	69 e1       	ldi	r22, 0x19	; 25
 2ae:	e6 2e       	mov	r14, r22
 2b0:	f1 2c       	mov	r15, r1
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <main+0x52>
 2b4:	c6 e4       	ldi	r28, 0x46	; 70
 2b6:	de e0       	ldi	r29, 0x0E	; 14
_delay_ms(1000);

while(1)
{
dis_cmd(0x01);_delay_ms(10);
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 c6 00 	call	0x18c	; 0x18c <dis_cmd>
 2c0:	c8 01       	movw	r24, r16
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0x5c>
dis_cmd(0x80);
 2c6:	80 e8       	ldi	r24, 0x80	; 128
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 c6 00 	call	0x18c	; 0x18c <dis_cmd>
lcd_string("Enter Password");
 2ce:	81 e7       	ldi	r24, 0x71	; 113
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_string>
dis_cmd(0xc4);
 2d6:	84 ec       	ldi	r24, 0xC4	; 196
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 c6 00 	call	0x18c	; 0x18c <dis_cmd>

do
{
y=key();
 2de:	0e 94 41 00 	call	0x82	; 0x82 <key>
 2e2:	9c 01       	movw	r18, r24
if(y==12) {break;}
 2e4:	8c 30       	cpi	r24, 0x0C	; 12
 2e6:	91 05       	cpc	r25, r1
 2e8:	89 f0       	breq	.+34     	; 0x30c <main+0xa6>
else
{
sum=(sum*10)+y;
 2ea:	ce 01       	movw	r24, r28
 2ec:	53 e0       	ldi	r21, 0x03	; 3
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	5a 95       	dec	r21
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <main+0x88>
 2f6:	cc 0f       	add	r28, r28
 2f8:	dd 1f       	adc	r29, r29
 2fa:	c8 0f       	add	r28, r24
 2fc:	d9 1f       	adc	r29, r25
 2fe:	c2 0f       	add	r28, r18
 300:	d3 1f       	adc	r29, r19
lcd_string("*");
 302:	80 e8       	ldi	r24, 0x80	; 128
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_string>
 30a:	e9 cf       	rjmp	.-46     	; 0x2de <main+0x78>
}
}while(y!=12);



if(sum==sum1)
 30c:	8e e0       	ldi	r24, 0x0E	; 14
 30e:	c6 34       	cpi	r28, 0x46	; 70
 310:	d8 07       	cpc	r29, r24
 312:	b9 f4       	brne	.+46     	; 0x342 <main+0xdc>
{
dis_cmd(0x01);_delay_ms(10);
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 c6 00 	call	0x18c	; 0x18c <dis_cmd>
 31c:	c8 01       	movw	r24, r16
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <main+0xb8>
dis_cmd(0x80);
 322:	80 e8       	ldi	r24, 0x80	; 128
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 c6 00 	call	0x18c	; 0x18c <dis_cmd>
lcd_string("Right Password");
 32a:	82 e8       	ldi	r24, 0x82	; 130
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_string>
 332:	88 e9       	ldi	r24, 0x98	; 152
 334:	9a e3       	ldi	r25, 0x3A	; 58
 336:	f7 01       	movw	r30, r14
 338:	31 97       	sbiw	r30, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <main+0xd2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 33c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 33e:	d9 f7       	brne	.-10     	; 0x336 <main+0xd0>
 340:	b9 cf       	rjmp	.-142    	; 0x2b4 <main+0x4e>
_delay_ms(1500);
}
else
{
dis_cmd(0x01);_delay_ms(10);
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 c6 00 	call	0x18c	; 0x18c <dis_cmd>
 34a:	c8 01       	movw	r24, r16
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <main+0xe6>
dis_cmd(0x80);
 350:	80 e8       	ldi	r24, 0x80	; 128
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	0e 94 c6 00 	call	0x18c	; 0x18c <dis_cmd>
lcd_string("Wrong Password");
 358:	81 e9       	ldi	r24, 0x91	; 145
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 26 01 	call	0x24c	; 0x24c <lcd_string>
 360:	88 e9       	ldi	r24, 0x98	; 152
 362:	9a e3       	ldi	r25, 0x3A	; 58
 364:	f7 01       	movw	r30, r14
 366:	31 97       	sbiw	r30, 0x01	; 1
 368:	f1 f7       	brne	.-4      	; 0x366 <main+0x100>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 36a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 36c:	d9 f7       	brne	.-10     	; 0x364 <main+0xfe>
 36e:	a4 cf       	rjmp	.-184    	; 0x2b8 <main+0x52>

00000370 <__divmodhi4>:
 370:	97 fb       	bst	r25, 7
 372:	09 2e       	mov	r0, r25
 374:	07 26       	eor	r0, r23
 376:	0a d0       	rcall	.+20     	; 0x38c <__divmodhi4_neg1>
 378:	77 fd       	sbrc	r23, 7
 37a:	04 d0       	rcall	.+8      	; 0x384 <__divmodhi4_neg2>
 37c:	0c d0       	rcall	.+24     	; 0x396 <__udivmodhi4>
 37e:	06 d0       	rcall	.+12     	; 0x38c <__divmodhi4_neg1>
 380:	00 20       	and	r0, r0
 382:	1a f4       	brpl	.+6      	; 0x38a <__divmodhi4_exit>

00000384 <__divmodhi4_neg2>:
 384:	70 95       	com	r23
 386:	61 95       	neg	r22
 388:	7f 4f       	sbci	r23, 0xFF	; 255

0000038a <__divmodhi4_exit>:
 38a:	08 95       	ret

0000038c <__divmodhi4_neg1>:
 38c:	f6 f7       	brtc	.-4      	; 0x38a <__divmodhi4_exit>
 38e:	90 95       	com	r25
 390:	81 95       	neg	r24
 392:	9f 4f       	sbci	r25, 0xFF	; 255
 394:	08 95       	ret

00000396 <__udivmodhi4>:
 396:	aa 1b       	sub	r26, r26
 398:	bb 1b       	sub	r27, r27
 39a:	51 e1       	ldi	r21, 0x11	; 17
 39c:	07 c0       	rjmp	.+14     	; 0x3ac <__udivmodhi4_ep>

0000039e <__udivmodhi4_loop>:
 39e:	aa 1f       	adc	r26, r26
 3a0:	bb 1f       	adc	r27, r27
 3a2:	a6 17       	cp	r26, r22
 3a4:	b7 07       	cpc	r27, r23
 3a6:	10 f0       	brcs	.+4      	; 0x3ac <__udivmodhi4_ep>
 3a8:	a6 1b       	sub	r26, r22
 3aa:	b7 0b       	sbc	r27, r23

000003ac <__udivmodhi4_ep>:
 3ac:	88 1f       	adc	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	5a 95       	dec	r21
 3b2:	a9 f7       	brne	.-22     	; 0x39e <__udivmodhi4_loop>
 3b4:	80 95       	com	r24
 3b6:	90 95       	com	r25
 3b8:	bc 01       	movw	r22, r24
 3ba:	cd 01       	movw	r24, r26
 3bc:	08 95       	ret

000003be <_exit>:
 3be:	f8 94       	cli

000003c0 <__stop_program>:
 3c0:	ff cf       	rjmp	.-2      	; 0x3c0 <__stop_program>
