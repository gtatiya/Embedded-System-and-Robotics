
12_ctc_speaker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000158  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000003e4  00000000  00000000  000001e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000fe  00000000  00000000  000005cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000303  00000000  00000000  000006c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000009cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000cc  00000000  00000000  000009ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000220  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000a8  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
void main()
{
  6c:	ef 92       	push	r14
  6e:	ff 92       	push	r15
  70:	0f 93       	push	r16
  72:	1f 93       	push	r17
DDRB=0xff;
  74:	8f ef       	ldi	r24, 0xFF	; 255
  76:	87 bb       	out	0x17, r24	; 23
TCCR0=0x19;   //CTC Mode for speaker
  78:	89 e1       	ldi	r24, 0x19	; 25
  7a:	83 bf       	out	0x33, r24	; 51
while(1)
{
OCR0=59;_delay_ms(500);  //sa
  7c:	9b e3       	ldi	r25, 0x3B	; 59
  7e:	e9 2e       	mov	r14, r25
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  80:	29 e1       	ldi	r18, 0x19	; 25
  82:	30 e0       	ldi	r19, 0x00	; 0
OCR0=52;_delay_ms(500);  //re
  84:	84 e3       	ldi	r24, 0x34	; 52
  86:	f8 2e       	mov	r15, r24
OCR0=56;_delay_ms(500);  //ga
  88:	08 e3       	ldi	r16, 0x38	; 56
OCR0=46;_delay_ms(500);  //ma
  8a:	1e e2       	ldi	r17, 0x2E	; 46
OCR0=44;_delay_ms(500);  //pa
  8c:	bc e2       	ldi	r27, 0x2C	; 44
OCR0=38;_delay_ms(500);  //dha
  8e:	a6 e2       	ldi	r26, 0x26	; 38
OCR0=30;_delay_ms(500);  //ni
  90:	7e e1       	ldi	r23, 0x1E	; 30
OCR0=28;_delay_ms(500);  //se
  92:	6c e1       	ldi	r22, 0x1C	; 28
  94:	44 ef       	ldi	r20, 0xF4	; 244
  96:	51 e0       	ldi	r21, 0x01	; 1
{
DDRB=0xff;
TCCR0=0x19;   //CTC Mode for speaker
while(1)
{
OCR0=59;_delay_ms(500);  //sa
  98:	ec be       	out	0x3c, r14	; 60
  9a:	88 e8       	ldi	r24, 0x88	; 136
  9c:	93 e1       	ldi	r25, 0x13	; 19
  9e:	f9 01       	movw	r30, r18
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <main+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a6:	d9 f7       	brne	.-10     	; 0x9e <main+0x32>
OCR0=52;_delay_ms(500);  //re
  a8:	fc be       	out	0x3c, r15	; 60
  aa:	88 e8       	ldi	r24, 0x88	; 136
  ac:	93 e1       	ldi	r25, 0x13	; 19
  ae:	f9 01       	movw	r30, r18
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <main+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b6:	d9 f7       	brne	.-10     	; 0xae <main+0x42>
OCR0=56;_delay_ms(500);  //ga
  b8:	0c bf       	out	0x3c, r16	; 60
  ba:	88 e8       	ldi	r24, 0x88	; 136
  bc:	93 e1       	ldi	r25, 0x13	; 19
  be:	f9 01       	movw	r30, r18
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c6:	d9 f7       	brne	.-10     	; 0xbe <main+0x52>
OCR0=46;_delay_ms(500);  //ma
  c8:	1c bf       	out	0x3c, r17	; 60
  ca:	88 e8       	ldi	r24, 0x88	; 136
  cc:	93 e1       	ldi	r25, 0x13	; 19
  ce:	f9 01       	movw	r30, r18
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d6:	d9 f7       	brne	.-10     	; 0xce <main+0x62>
OCR0=44;_delay_ms(500);  //pa
  d8:	bc bf       	out	0x3c, r27	; 60
  da:	88 e8       	ldi	r24, 0x88	; 136
  dc:	93 e1       	ldi	r25, 0x13	; 19
  de:	f9 01       	movw	r30, r18
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e6:	d9 f7       	brne	.-10     	; 0xde <main+0x72>
OCR0=38;_delay_ms(500);  //dha
  e8:	ac bf       	out	0x3c, r26	; 60
  ea:	88 e8       	ldi	r24, 0x88	; 136
  ec:	93 e1       	ldi	r25, 0x13	; 19
  ee:	f9 01       	movw	r30, r18
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x84>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f6:	d9 f7       	brne	.-10     	; 0xee <main+0x82>
OCR0=30;_delay_ms(500);  //ni
  f8:	7c bf       	out	0x3c, r23	; 60
  fa:	88 e8       	ldi	r24, 0x88	; 136
  fc:	93 e1       	ldi	r25, 0x13	; 19
  fe:	f9 01       	movw	r30, r18
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <main+0x94>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 104:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 106:	d9 f7       	brne	.-10     	; 0xfe <main+0x92>
OCR0=28;_delay_ms(500);  //se
 108:	6c bf       	out	0x3c, r22	; 60
 10a:	88 e8       	ldi	r24, 0x88	; 136
 10c:	93 e1       	ldi	r25, 0x13	; 19
 10e:	f9 01       	movw	r30, r18
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0xa4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 114:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 116:	d9 f7       	brne	.-10     	; 0x10e <main+0xa2>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	90 e0       	ldi	r25, 0x00	; 0

for(int i=0;i<=255;i++)
{
OCR0=i;_delay_ms(2);           //OCR0 is connected to PB3
 11c:	8c bf       	out	0x3c, r24	; 60
 11e:	fa 01       	movw	r30, r20
 120:	31 97       	sbiw	r30, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <main+0xb4>
OCR0=44;_delay_ms(500);  //pa
OCR0=38;_delay_ms(500);  //dha
OCR0=30;_delay_ms(500);  //ni
OCR0=28;_delay_ms(500);  //se

for(int i=0;i<=255;i++)
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	e1 e0       	ldi	r30, 0x01	; 1
 128:	80 30       	cpi	r24, 0x00	; 0
 12a:	9e 07       	cpc	r25, r30
 12c:	b9 f7       	brne	.-18     	; 0x11c <main+0xb0>
 12e:	88 e8       	ldi	r24, 0x88	; 136
 130:	93 e1       	ldi	r25, 0x13	; 19
 132:	f9 01       	movw	r30, r18
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0xc8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 138:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 13a:	d9 f7       	brne	.-10     	; 0x132 <main+0xc6>
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	90 e0       	ldi	r25, 0x00	; 0
OCR0=i;_delay_ms(2);           //OCR0 is connected to PB3
}
_delay_ms(500);
for(int i=255;i>=0;i--)
{
OCR0=i;_delay_ms(2);
 140:	8c bf       	out	0x3c, r24	; 60
 142:	fa 01       	movw	r30, r20
 144:	31 97       	sbiw	r30, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <main+0xd8>
for(int i=0;i<=255;i++)
{
OCR0=i;_delay_ms(2);           //OCR0 is connected to PB3
}
_delay_ms(500);
for(int i=255;i>=0;i--)
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	ef ef       	ldi	r30, 0xFF	; 255
 14c:	8f 3f       	cpi	r24, 0xFF	; 255
 14e:	9e 07       	cpc	r25, r30
 150:	b9 f7       	brne	.-18     	; 0x140 <main+0xd4>
 152:	a2 cf       	rjmp	.-188    	; 0x98 <main+0x2c>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
